USE [GL_TNB_DWH]
GO
/****** Object:  StoredProcedure [PPL].[CRE_DIM_DATE]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--IF OBJECT_ID('PPL.CRE_DIM_DATE','P') IS NOT NULL DROP PROCEDURE PPL.[PPL.CRE_DIM_DATE]
--GO

/* STORED PROCEDURE NAME :  [CRE_DIM_DATE]
 * SOURCE TABLES		 :  
 * PURPOSE				 :  TO REPLICATE DATA FROM TMP.TMP_PUBLIC_HOLIDAY TO WH.DIM_DATE WITH PUBLIC HOLIDAY CHECKING
 * PARAMETERS			 :  @JOB_RUN_KEY  : JOB RUN KEY ID
 *						
 * PERMISSIONS           : GRANT EXECUTE ON PPL.CRE_DIM_DATE TO PUBLIC
 * TESTING METHOD		 : 1. EXECUTE PPL.[CRE_DIM_DATE]
 *						   2. SELECT * FROM DWH_TNB_DIM_DATE
 *						 
 * REVISION HISTORY
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * EPWR NO    DATE			 AUTHOR               DESCRIPTION OF CHANGE
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-07     NATTAPONG LAIYAPARK  CREATION OF THIS INITIALIZATION SCRIPT.
  
*/

CREATE PROCEDURE [PPL].[CRE_DIM_DATE]
(	
	@JOB_RUN_KEY BIGINT
) 
AS
BEGIN

--DECLARE @START_DATE DATETIME = DATEADD(YY, DATEDIFF(YY,0,GETDATE()), 0) --STARTING VALUE OF DATE RANGE
--DECLARE @END_DATE DATETIME = DATEADD(MS,-3,DATEADD(YY,0,DATEADD(YY,DATEDIFF(YY,0,GETDATE())+1,0)))  --END VALUE OF DATE RANGE

DECLARE @START_DATE DATETIME = '2015/01/01'
DECLARE @END_DATE DATETIME = '2017/12/31'

/* DELETE TABLE THAT DATE_KEY EXISTING IN CURRENT YEAR */
IF EXISTS (SELECT NAME FROM SYS.TABLES WHERE NAME = N'DWH_TNB_DIM_DATE')
	BEGIN
		TRUNCATE TABLE DIM.DWH_TNB_DIM_DATE
	END
--TRUNCATE TABLE DIM.DWH_TNB_DIM_DATE

/*TEMPORARY VARIABLES TO HOLD THE VALUES DURING PROCESSING OF EACH DATE OF YEAR*/
DECLARE	@DAY_OF_WEEKINMONTH	INT,
		@DAY_OF_WEEKINYEAR	INT,
		@DAY_OF_QUARTER		INT,
		@WEEK_OF_MONTH		INT,
		@CURRENT_YEAR		INT,
		@CURRENT_MONTH		INT,
		@CURRENT_QUARTER		INT

/*TABLE DATA TYPE TO STORE THE DAY OF WEEK COUNT FOR THE MONTH AND YEAR*/
DECLARE @DAY_OF_WEEK TABLE (DOW INT, MONTH_COUNT INT, QUARTER_COUNT INT, YEAR_COUNT INT)

INSERT INTO @DAY_OF_WEEK VALUES (1, 0, 0, 0)
INSERT INTO @DAY_OF_WEEK VALUES (2, 0, 0, 0)
INSERT INTO @DAY_OF_WEEK VALUES (3, 0, 0, 0)
INSERT INTO @DAY_OF_WEEK VALUES (4, 0, 0, 0)
INSERT INTO @DAY_OF_WEEK VALUES (5, 0, 0, 0)
INSERT INTO @DAY_OF_WEEK VALUES (6, 0, 0, 0)
INSERT INTO @DAY_OF_WEEK VALUES (7, 0, 0, 0)

/*EXTRACT AND ASSIGN VARIOUS PARTS OF VALUES FROM CURRENT DATE TO VARIABLE*/

DECLARE @CURRENT_DATE AS DATETIME = @START_DATE
SET @CURRENT_MONTH = DATEPART(MM, @CURRENT_DATE)
SET @CURRENT_YEAR = DATEPART(YY, @CURRENT_DATE)
SET @CURRENT_QUARTER = DATEPART(QQ, @CURRENT_DATE)

/********************************************************************************************/

/* CREATE TEMP TABLE TO STORE DATE INFORMATION FOR JOINNING WITH TMP_PUBLIC_HOLIDAY */
CREATE TABLE #TEMP_DIM_DATE_WITHOUT_HOL(
			DATE_KEY				INT NOT NULL,
			DATE_TIME				DATETIME NOT NULL,
			FULL_DATE				CHAR(10) NOT NULL,
			DAY_OF_MONTH			VARCHAR(2) NOT NULL,
			DAY_SUFFIX				VARCHAR(4) NOT NULL,
			DAY_NAME				VARCHAR(9) NOT NULL,
			DAY_SHORT_NAME			VARCHAR(3) NOT NULL,
			DAY_OF_WEEK				CHAR(1) NOT NULL,
			DAY_OF_WEEK_IN_MONTH	VARCHAR(2) NOT NULL,
			DAY_OF_WEEK_IN_YEAR		VARCHAR(2) NOT NULL,
			DAY_OF_QUARTER			VARCHAR(3) NOT NULL,
			DAY_OF_YEAR				VARCHAR(3) NOT NULL,
			WEEK_OF_MONTH			VARCHAR(1) NOT NULL,
			WEEK_OF_QUARTER			VARCHAR(2) NOT NULL,
			WEEK_OF_YEAR			VARCHAR(2) NOT NULL,
			MONTH					VARCHAR(2) NOT NULL,
			MONTH_NAME				VARCHAR(9) NOT NULL,
			MONTH_SHORT_NAME		VARCHAR(3) NOT NULL,
			MONTH_OF_QUARTER		VARCHAR(2) NOT NULL,
			QUARTER					CHAR(1) NOT NULL,
			QUARTER_NAME			VARCHAR(9) NOT NULL,
			YEAR					CHAR(4) NOT NULL,
			YEAR_NAME				CHAR(7) NOT NULL,
			MONTH_YEAR				CHAR(10) NOT NULL,
			MMYYYY					CHAR(6) NOT NULL,
			YYYYMM					CHAR(6) NOT NULL,
			FIRST_DAY_OF_MONTH		DATE NOT NULL,
			LAST_DAY_OF_MONTH		DATE NOT NULL,
			FIRST_DAY_OF_QUARTER	DATE NOT NULL,
			LAST_DAY_OF_QUARTER		DATE NOT NULL,
			FIRST_DAY_OF_YEAR		DATE NOT NULL,
			LAST_DAY_OF_YEAR		DATE NOT NULL,
			IS_HOLIDAY				BIT NOT NULL,
			IS_WEEKDAY				BIT NOT NULL,
			HOLIDAY_DESC			VARCHAR(50) NULL,
			JOB_RUN_KEY				BIGINT NOT NULL,
			DELETED_FLAG			CHAR(1)  NOT NULL DEFAULT 'N', 
			COMMENTS				VARCHAR(500) NULL,
			LAST_UPDATE_DATE_TIME	DATETIME  NOT NULL DEFAULT GETDATE()
)

/*PROCEED ONLY IF START DATE(CURRENT DATE) IS LESS THAN END DATE YOU SPECIFIED ABOVE*/

WHILE @CURRENT_DATE <= @END_DATE
BEGIN

/*BEGIN DAY OF WEEK LOGIC*/

         /*CHECK FOR CHANGE IN MONTH OF THE CURRENT DATE IF MONTH CHANGED THEN CHANGE VARIABLE VALUE*/
	IF @CURRENT_MONTH != DATEPART(MM, @CURRENT_DATE) 
	BEGIN
		UPDATE	@DAY_OF_WEEK
		SET		MONTH_COUNT = 0
		SET		@CURRENT_MONTH = DATEPART(MM, @CURRENT_DATE)
	END

        /* CHECK FOR CHANGE IN QUARTER OF THE CURRENT DATE IF QUARTER CHANGED THEN CHANGE VARIABLE VALUE*/

	IF @CURRENT_QUARTER != DATEPART(QQ, @CURRENT_DATE)
	BEGIN
		UPDATE	@DAY_OF_WEEK
		SET		QUARTER_COUNT = 0
		SET		@CURRENT_QUARTER = DATEPART(QQ, @CURRENT_DATE)
	END
       
        /* CHECK FOR CHANGE IN YEAR OF THE CURRENT DATE IF YEAR CHANGED THEN CHANGE VARIABLE VALUE*/
	
	IF @CURRENT_YEAR != DATEPART(YY, @CURRENT_DATE)
	BEGIN
		UPDATE	@DAY_OF_WEEK
		SET		YEAR_COUNT = 0
		SET		@CURRENT_YEAR = DATEPART(YY, @CURRENT_DATE)
	END
	
        /* SET VALUES IN TABLE DATA TYPE CREATED ABOVE FROM VARIABLES */

	UPDATE	@DAY_OF_WEEK
	SET		MONTH_COUNT = MONTH_COUNT + 1,
			QUARTER_COUNT = QUARTER_COUNT + 1,
			YEAR_COUNT = YEAR_COUNT + 1
	WHERE	DOW = DATEPART(DW, @CURRENT_DATE)

	SELECT	@DAY_OF_WEEKINMONTH = MONTH_COUNT,
			@DAY_OF_QUARTER = QUARTER_COUNT,
			@DAY_OF_WEEKINYEAR = YEAR_COUNT
	FROM	@DAY_OF_WEEK
	WHERE	DOW = DATEPART(DW, @CURRENT_DATE)
	
/*END DAY OF WEEK LOGIC*/


/* POPULATE TMP_DIM_DATE TABLE WITH VALUES*/
	INSERT INTO #TEMP_DIM_DATE_WITHOUT_HOL
	SELECT	CONVERT (CHAR(8),@CURRENT_DATE,112) AS [DATE_KEY],
			@CURRENT_DATE AS DATE_TIME,
			CONVERT (CHAR(10),@CURRENT_DATE,110) AS [FULL_DATE],
			DATEPART(DD, @CURRENT_DATE) AS [DAY_OF_MONTH],
			--APPLY SUFFIX VALUES LIKE 1ST, 2ND 3RD ETC..
			CASE 
				WHEN DATEPART(DD,@CURRENT_DATE) IN (11,12,13) THEN CAST(DATEPART(DD,@CURRENT_DATE) AS VARCHAR) + 'th'
				WHEN RIGHT(DATEPART(DD,@CURRENT_DATE),1) = 1 THEN CAST(DATEPART(DD,@CURRENT_DATE) AS VARCHAR) + 'st'
				WHEN RIGHT(DATEPART(DD,@CURRENT_DATE),1) = 2 THEN CAST(DATEPART(DD,@CURRENT_DATE) AS VARCHAR) + 'nd'
				WHEN RIGHT(DATEPART(DD,@CURRENT_DATE),1) = 3 THEN CAST(DATEPART(DD,@CURRENT_DATE) AS VARCHAR) + 'rd'
				ELSE CAST(DATEPART(DD,@CURRENT_DATE) AS VARCHAR) + 'th' 
			END AS [DAY_SUFFIX],
			DATENAME(DW, @CURRENT_DATE) AS [DAY_NAME],
			LEFT(DATENAME(DW, @CURRENT_DATE),3) AS [DAY_SHORT_NAME],
			DATEPART(DW, @CURRENT_DATE) AS [DAY_OF_WEEK],
			@DAY_OF_WEEKINMONTH AS [DAY_OF_WEEK_IN_MONTH],
			@DAY_OF_WEEKINYEAR AS [DAY_OF_WEEK_IN_YEAR],
			@DAY_OF_QUARTER AS [DAY_OF_QUARTER],
			DATEPART(DY, @CURRENT_DATE) AS [DAY_OF_YEAR],
			DATEPART(WW, @CURRENT_DATE) + 1 - DATEPART(WW, CONVERT(VARCHAR,DATEPART(MM, @CURRENT_DATE)) + '/1/' + CONVERT(VARCHAR, DATEPART(YY, @CURRENT_DATE))) AS [WEEK_OF_MONTH],
			(DATEDIFF(DD, DATEADD(QQ, DATEDIFF(QQ, 0, @CURRENT_DATE), 0),@CURRENT_DATE) / 7) + 1 AS [WEEK_OF_QUARTER],
			DATEPART(WW, @CURRENT_DATE) AS [WEEK_OF_YEAR],
			DATEPART(MM, @CURRENT_DATE) AS [MONTH],
			DATENAME(MM, @CURRENT_DATE) AS [MONTH_NAME],
			LEFT(DATENAME(MM, @CURRENT_DATE),3) AS [MONTH_SHORT_NAME],
			CASE
				WHEN DATEPART(MM, @CURRENT_DATE) IN (1, 4, 7, 10) THEN 1
				WHEN DATEPART(MM, @CURRENT_DATE) IN (2, 5, 8, 11) THEN 2
				WHEN DATEPART(MM, @CURRENT_DATE) IN (3, 6, 9, 12) THEN 3
			END AS [MONTH_OF_QUARTER],
			DATEPART(QQ, @CURRENT_DATE) AS [QUARTER],
			CASE DATEPART(QQ, @CURRENT_DATE)
				WHEN 1 THEN 'FIRST'
				WHEN 2 THEN 'SECOND'
				WHEN 3 THEN 'THIRD'
				WHEN 4 THEN 'FOURTH'
			END AS [QUARTER_NAME],
			DATEPART(YEAR, @CURRENT_DATE) AS [YEAR],
			'CY ' + CONVERT(VARCHAR, DATEPART(YEAR, @CURRENT_DATE)) AS [YEAR_NAME],LEFT(DATENAME(MM, @CURRENT_DATE), 3) + '-' + CONVERT(VARCHAR, DATEPART(YY, @CURRENT_DATE)) AS [MONTH_YEAR],
			RIGHT('0' + CONVERT(VARCHAR, DATEPART(MM, @CURRENT_DATE)),2) + CONVERT(VARCHAR, DATEPART(YY, @CURRENT_DATE)) AS [MMYYYY],
			CONVERT(VARCHAR, DATEPART(YY, @CURRENT_DATE))+RIGHT('0' + CONVERT(VARCHAR, DATEPART(MM, @CURRENT_DATE)),2) AS [YYYYMM],
			CONVERT(DATETIME, CONVERT(DATE, DATEADD(DD, - (DATEPART(DD, @CURRENT_DATE) - 1), @CURRENT_DATE))) AS [FIRST_DAY_OF_MONTH],
			CONVERT(DATETIME, CONVERT(DATE, DATEADD(DD, - (DATEPART(DD, (DATEADD(MM, 1, @CURRENT_DATE)))), DATEADD(MM, 1, @CURRENT_DATE)))) AS [LAST_DAY_OF_MONTH],
			DATEADD(QQ, DATEDIFF(QQ, 0, @CURRENT_DATE), 0) AS [FIRST_DAY_OF_QUARTER],
			DATEADD(QQ, DATEDIFF(QQ, -1, @CURRENT_DATE), -1) AS [LAST_DAY_OF_QUARTER],
			CONVERT(DATETIME, '01/01/' + CONVERT(VARCHAR, DATEPART(YY, @CURRENT_DATE))) AS [FIRST_DAY_OF_YEAR],
			CONVERT(DATETIME, '12/31/' + CONVERT(VARCHAR, DATEPART(YY, @CURRENT_DATE))) AS [LAST_DAY_OF_YEAR],
			0 AS [IS_HOLIDAY],
			CASE DATEPART(DW, @CURRENT_DATE)
				WHEN 1 THEN 0
				WHEN 2 THEN 1
				WHEN 3 THEN 1
				WHEN 4 THEN 1
				WHEN 5 THEN 1
				WHEN 6 THEN 1
				WHEN 7 THEN 0
			END AS [IS_WEEKDAY],
			'N/A' AS [HOLIDAY_DESC],
			@JOB_RUN_KEY AS [JOB_RUN_KEY],
			'N' AS [DELETED_FLAG],
			NULL AS COMMENTS,
			GETDATE() AS [LAST_UPDATE_DATE_TIME]	
	SET @CURRENT_DATE = DATEADD(DD, 1, @CURRENT_DATE)
END /*END WHILE LOOP*/
print 'sdf'
/* INSERT DATE INFORMATION TO WH.DIM_DATE WITHOUT PUBLIC HOLIDAY*/
	INSERT INTO DIM.DWH_TNB_DIM_DATE
	SELECT DATE_KEY
		  ,DATE_TIME
		  ,FULL_DATE
		  ,DAY_OF_MONTH
		  ,DAY_SUFFIX
		  ,DAY_NAME
		  ,DAY_SHORT_NAME
		  ,DAY_OF_WEEK
		  ,DAY_OF_WEEK_IN_MONTH
		  ,DAY_OF_WEEK_IN_YEAR
		  ,DAY_OF_QUARTER
		  ,DAY_OF_YEAR
		  ,WEEK_OF_MONTH
		  ,WEEK_OF_QUARTER
		  ,WEEK_OF_YEAR
		  ,MONTH
		  ,MONTH_NAME
		  ,MONTH_SHORT_NAME
		  ,MONTH_OF_QUARTER
		  ,QUARTER
		  ,QUARTER_NAME
		  ,YEAR
		  ,YEAR_NAME
		  ,MONTH_YEAR
		  ,MMYYYY
		  ,YYYYMM
		  ,FIRST_DAY_OF_MONTH
		  ,LAST_DAY_OF_MONTH
		  ,FIRST_DAY_OF_QUARTER
		  ,LAST_DAY_OF_QUARTER
		  ,FIRST_DAY_OF_YEAR
		  ,LAST_DAY_OF_YEAR
		 -- ,CASE
			--	WHEN ( TPHO.PUHOL_ID IS NOT NULL) THEN 1
			--	ELSE 0 
			--END AS IS_HOLIDAY
		  ,IS_HOLIDAY
		  ,IS_WEEKDAY
		 -- ,CASE
			--	WHEN ( TPHO.PUHOL_ID IS NOT NULL) THEN TPHO.PUHOL_VA_DESC
			--	ELSE 'N/A'
			--END AS HOLIDAY_DESC
		  ,HOLIDAY_DESC
		  ,1 AS [JOB_RUN_KEY]
		  ,'N' AS [DELETED_FLAG]
		  ,NULL AS COMMENTS
		  ,GETDATE() AS [LAST_UPDATE_DATE_TIME]


	FROM #TEMP_DIM_DATE_WITHOUT_HOL TDWH
	--LEFT JOIN TMP.TMP_PUBLIC_HOLIDAY TPHO
	--ON TDWH.DATE_KEY = TPHO.PUHOL_ID

--SELECT * FROM DIM.DWH_TNB_DIM_DATE

DROP TABLE #TEMP_DIM_DATE_WITHOUT_HOL
--TRUNCATE TABLE TMP.TMP_PUBLIC_HOLIDAY

/********************************************************************************************/
END


GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_ACCOUNT_STATUS]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [PPL].[STG2_DIM_ACCOUNT_STATUS]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_ACCOUNT_STATUS
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_ACCOUNT_STATUS
 * Purpose					:  To replicate data from GL_TNB_STG.STG.STG_TNB_MST_ACCOUNT_STATUS to GL_TNB_DWH.DIM.DWH_TNB_DIM_ACCOUNT_STATUS
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-06     Perasan.A			  Creation of this initialization script.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_ACCOUNT_STATUS WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_ACCOUNT_STATUS WITH GL_TNB_STG.STG.STG_TNB_MST_ACCOUNT_STATUS
 BEGIN
	MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_ACCOUNT_STATUS AS TARGET_TABLE
	USING	(
			 SELECT	 MDSC_COD,MDSC_DSC
					,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME
			 FROM	 GL_TNB_STG.STG.STG_TNB_MST_ACCOUNT_STATUS 
			 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.ACCOUNT_STATUS_CODE = SOURCE_TABLE.MDSC_COD)
	WHEN MATCHED THEN
		UPDATE SET   ACCOUNT_STATUS_DESC = SOURCE_TABLE.MDSC_DSC
					,JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY
					,SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE
					,SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME
					,DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG
					,SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
					,LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (ACCOUNT_STATUS_CODE,ACCOUNT_STATUS_DESC,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME)
		VALUES (SOURCE_TABLE.MDSC_COD,SOURCE_TABLE.MDSC_DSC,SOURCE_TABLE.JOB_RUN_KEY,SOURCE_TABLE.SOURCE_SYSTEM_CODE,SOURCE_TABLE.SOURCE_TABLE_NAME,SOURCE_TABLE.DELETED_FLAG,'',SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

  --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_ACCOUNT_STATUS WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END



GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_APPLICATION_STATUS]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [PPL].[STG2_DIM_APPLICATION_STATUS]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_APPLICATION_STATUS
 * Source Tables			:  -
 * Purpose					:  To replicate data to GL_TNB_DWH.DIM.DWH_TNB_DIM_APPLICATION_STATUS
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-10-04     Perasan.A			  Creation of this initialization script.
 */

 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 PREPARE DATA FOR INSERT
 DECLARE @TMP_DATA table
 (
  APPLICATION_STATUS_CODE nvarchar(30)
 )

 INSERT INTO @TMP_DATA 
 VALUES ('Application')
 INSERT INTO @TMP_DATA 
 VALUES ('Approve')
 INSERT INTO @TMP_DATA 
 VALUES ('Finance')
 INSERT INTO @TMP_DATA 
 VALUES ('Reject')
 INSERT INTO @TMP_DATA 
 VALUES ('Cancel')
 INSERT INTO @TMP_DATA 
 VALUES ('Waitng')
 INSERT INTO @TMP_DATA 
 VALUES ('Paid')
 INSERT INTO @TMP_DATA 
 VALUES ('Payable')

 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_APPLICATION_STATUS WITH @TMP_DATA
 BEGIN
	MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_APPLICATION_STATUS AS TARGET_TABLE
	USING	(
			 SELECT	 APPLICATION_STATUS_CODE
			 FROM	 @TMP_DATA
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.APPLICATION_STATUS_CODE = SOURCE_TABLE.APPLICATION_STATUS_CODE)
	WHEN MATCHED THEN
		UPDATE SET   JOB_RUN_KEY = @JOB_RUN_KEY
					,SOURCE_LAST_UPDATE_DATE_TIME = GETDATE()
					,LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (APPLICATION_STATUS_CODE,APPLICATION_STATUS_DESC,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME)
		VALUES (SOURCE_TABLE.APPLICATION_STATUS_CODE,SOURCE_TABLE.APPLICATION_STATUS_CODE,@JOB_RUN_KEY,'','','N','',GETDATE(),GETDATE())
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

  --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_APPLICATION_STATUS WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT 8 AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END
GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_BOT_CLASS]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [PPL].[STG2_DIM_BOT_CLASS]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_BOT_CLASS
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_BOT_CLASS
 * Purpose					:  To replicate data from GL_TNB_STG.STG.STG_TNB_MST_BOT_CLASS to GL_TNB_DWH.DIM.DWH_TNB_DIM_BOT_CLASS
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-27     Supawadee.K			  Creation of this initialization script.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_BOT_CLASS WHERE JOB_RUN_KEY = @JOB_RUN_KEY


 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_BOT_CLASS WITH GL_TNB_STG.STG.STG_TNB_MST_BOT_CLASS
 BEGIN
	MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_BOT_CLASS AS TARGET_TABLE
	USING	(
			 SELECT	 MDSC_GROUP,MDSC_DSC,MDSC_COD
					,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME
			 FROM	 GL_TNB_STG.STG.STG_TNB_MST_BOT_CLASS 
			 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.BOT_CLASS_CODE = SOURCE_TABLE.MDSC_GROUP)
	WHEN MATCHED THEN
		UPDATE SET   BOT_CLASS_DESC = SOURCE_TABLE.MDSC_DSC
					,BOT_CLASS_NO = SOURCE_TABLE.MDSC_COD
					,JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY
					,SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE
					,SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME
					,DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG
					,SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
					,LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (BOT_CLASS_CODE,BOT_CLASS_DESC,BOT_CLASS_NO,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME)
		VALUES (SOURCE_TABLE.MDSC_GROUP,SOURCE_TABLE.MDSC_DSC,SOURCE_TABLE.MDSC_COD,SOURCE_TABLE.JOB_RUN_KEY,SOURCE_TABLE.SOURCE_SYSTEM_CODE,SOURCE_TABLE.SOURCE_TABLE_NAME,SOURCE_TABLE.DELETED_FLAG,'',SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

  --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_BOT_CLASS WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END






GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_BRANCH]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [PPL].[STG2_DIM_BRANCH]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_BRANCH
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_BRANCH
 * Purpose					:  To replicate data from STG_TNB_MST_BRANCH to DWH_TNB_DIM_BRANCH (SCD TYPE 2)
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-07     Perasan.A			  Creation of this initialization script.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_BRANCH WHERE JOB_RUN_KEY = @JOB_RUN_KEY
 
 --STEP 2 DECLARE VARIABLE FOR LOAD DATA
 DECLARE @STG_BRANCH_CODE VARCHAR(10)
 DECLARE @STG_BRANCH_REGION VARCHAR(60)
 DECLARE @STG_BRANCH_NAME_THAI VARCHAR(60)
 DECLARE @STG_BRANCH_NAME_ENGLISH VARCHAR(60)
 DECLARE @STG_BRANCH_SHORT_NAME VARCHAR(3)
 DECLARE @STG_BRANCH_ORDER VARCHAR(5)
 DECLARE @STG_SOURCE_SYSTEM_CODE VARCHAR(10)
 DECLARE @STG_SOURCE_TABLE_NAME VARCHAR(20)
 DECLARE @STG_DELETED_FLAG VARCHAR(1)
 --DECLARE @STG_COMMENTS VARCHAR(500)
 DECLARE @STG_SOURCE_LAST_UPDATE_DATE_TIME DATETIME
 DECLARE @DWH_SK_BRANCH_KEY BIGINT
 DECLARE @DWH_BRANCH_REGION VARCHAR(60)
 DECLARE MST_BRANCH_Cursor CURSOR FOR

 --STEP 3 PREPARE DATA FROM STAGING TABLE
 SELECT	 MDLR_DEALER_CODE AS BRANCH_CODE
		,ISNULL(BRANCH_ZONE_NAME,'') AS BRANCH_REGION
		,ISNULL(ISNULL(BRANCH_NAME_THAI,MDLR_DEALER_NAME_THAI),'') AS BRANCH_NAME_THAI
		,ISNULL(ISNULL(BRANCH_NAME_ENG,MDLR_DEALER_NAME_ENGLISH),'') AS BRANCH_NAME_ENGLISH
		,ISNULL(BRANCH_SHORT_NAME,'') AS BRANCH_SHORT_NAME
		,ISNULL(BRANCH_ORDER,'99999') AS BRANCH_ORDER
		,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME
		,STG_TNB_MST_BRANCH.DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME
 FROM	 GL_TNB_STG.STG.STG_TNB_MST_BRANCH	LEFT OUTER JOIN
		 GL_TNB_STG.LKP.LKP_TNB_MST_BRANCH	ON MDLR_DEALER_CODE = BRANCH_CODE
 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 4 FETCH STAGING VALUE INTO VARIABLE
 OPEN MST_BRANCH_Cursor
 FETCH NEXT FROM MST_BRANCH_Cursor INTO @STG_BRANCH_CODE,@STG_BRANCH_REGION,@STG_BRANCH_NAME_THAI,@STG_BRANCH_NAME_ENGLISH,@STG_BRANCH_SHORT_NAME
									   ,@STG_BRANCH_ORDER,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME
									   ,@STG_DELETED_FLAG,@STG_SOURCE_LAST_UPDATE_DATE_TIME
 WHILE @@FETCH_STATUS = 0
 BEGIN

	 --STEP 5 GET MAX SURROGATE KEY FROM BUSINESS KEY (REFER TO DETAILS DESIGN DOCUMENT)
	 SELECT @DWH_SK_BRANCH_KEY = ISNULL(MAX(SK_BRANCH_KEY),0)
	 FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
	 WHERE	BRANCH_CODE = @STG_BRANCH_CODE

	 --STEP 6 CHECK RECORD EXIST FROM MAX SURROGATE KEY
	 IF @DWH_SK_BRANCH_KEY = 0 
		 BEGIN
			--STEP 7 INSERT NEW RECORD OF DIMENSION TO TARGET
			INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH (BRANCH_CODE,BRANCH_REGION,BRANCH_NAME_THAI,BRANCH_NAME_ENGLISH,BRANCH_SHORT_NAME
										   ,BRANCH_ORDER,IS_ACTIVE,VALID_FROM,VALID_TO,JOB_RUN_KEY
										   ,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS
										   ,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME) 
						            VALUES (@STG_BRANCH_CODE,@STG_BRANCH_REGION,@STG_BRANCH_NAME_THAI,@STG_BRANCH_NAME_ENGLISH,@STG_BRANCH_SHORT_NAME
								           ,@STG_BRANCH_ORDER,'Y',CONVERT(DATE,'01/01/1900',103),CONVERT(DATE,'31/12/9999',103),@JOB_RUN_KEY
										   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME,@STG_DELETED_FLAG,''
										   ,@STG_SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())

			SET @INS_CNT = @INS_CNT + 1
		 END
	 ELSE
		 BEGIN
			--STEP 8 SELECT FIELD FOR DETECT CHANGE (REFER TO DETAILS DESIGN DOCUMENT)
			SELECT	@DWH_BRANCH_REGION = BRANCH_REGION
			FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
			WHERE	SK_BRANCH_KEY = @DWH_SK_BRANCH_KEY

			--STEP 9 DETECT CHANGE COLUMNS (REFER TO DETAILS DESIGN DOCUMENT)
			IF (@STG_BRANCH_REGION <> @DWH_BRANCH_REGION) AND (@STG_BRANCH_REGION <> '') AND (@DWH_BRANCH_REGION <> '')
				BEGIN
					--STEP 10 UPDATE OLD RECORD STATUS OF DIMENSION TO INACTIVE AND VALID_TO
					UPDATE	GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
					SET		IS_ACTIVE = 'N',VALID_TO = CONVERT(DATE,CONVERT(VARCHAR(10),DATEADD(DAY,-1,GETDATE()),103),103)
					WHERE	SK_BRANCH_KEY = @DWH_SK_BRANCH_KEY

					--STEP 11 INSERT CHANGE RECORD OF DIMENSION TO TARGET TABLE ***VALID FROM
					INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH (BRANCH_CODE,BRANCH_REGION,BRANCH_NAME_THAI,BRANCH_NAME_ENGLISH,BRANCH_SHORT_NAME
												   ,BRANCH_ORDER,IS_ACTIVE,VALID_FROM,VALID_TO,JOB_RUN_KEY
												   ,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS
												   ,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME) 
											VALUES (@STG_BRANCH_CODE,@STG_BRANCH_REGION,@STG_BRANCH_NAME_THAI,@STG_BRANCH_NAME_ENGLISH,@STG_BRANCH_SHORT_NAME
												   ,@STG_BRANCH_ORDER,'Y',CONVERT(DATE,CONVERT(VARCHAR(10),GETDATE(),103),103),CONVERT(DATE,'31/12/9999',103),@JOB_RUN_KEY
												   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME,@STG_DELETED_FLAG,''
												   ,@STG_SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())

					SET @INS_CNT = @INS_CNT + 1
				END
			ELSE
				--STEP 12 IF THERE IS FILE MAPPING TO MAINTAIN CHECK NEW VALUE FROM MAINTAINANCE FILE
				IF (@DWH_BRANCH_REGION = '') AND (@STG_BRANCH_REGION <> '')
					BEGIN
						--STEP 13 UPDATE OLD RECORD VALUE WITH THE NEW VALUE (UPDATE DETECT CHANGE FIELD WITH THE NEW ONE THAT IS NOT NULL)
						UPDATE	 GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
						SET		 BRANCH_REGION = @STG_BRANCH_REGION
								,BRANCH_NAME_THAI = @STG_BRANCH_NAME_THAI,BRANCH_NAME_ENGLISH = @STG_BRANCH_NAME_ENGLISH
								,BRANCH_SHORT_NAME = @STG_BRANCH_SHORT_NAME
								,BRANCH_ORDER = @STG_BRANCH_ORDER,JOB_RUN_KEY = @JOB_RUN_KEY
								,SOURCE_SYSTEM_CODE = @STG_SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME = @STG_SOURCE_TABLE_NAME
								,DELETED_FLAG = @STG_DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME = @STG_SOURCE_LAST_UPDATE_DATE_TIME
								,LAST_UPDATE_DATE_TIME = GETDATE()
						WHERE	 SK_BRANCH_KEY = @DWH_SK_BRANCH_KEY
						
						SET @UPD_CNT = @UPD_CNT + 1
					END
				ELSE
					BEGIN
						--STEP 14 UPDATE OLD RECORD VALUE WITH THE NEW VALUE
						UPDATE	 GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
						SET		 BRANCH_NAME_THAI = @STG_BRANCH_NAME_THAI,BRANCH_NAME_ENGLISH = @STG_BRANCH_NAME_ENGLISH
								,BRANCH_SHORT_NAME = @STG_BRANCH_SHORT_NAME
								,BRANCH_ORDER = @STG_BRANCH_ORDER,JOB_RUN_KEY = @JOB_RUN_KEY
								,SOURCE_SYSTEM_CODE = @STG_SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME = @STG_SOURCE_TABLE_NAME
								,DELETED_FLAG = @STG_DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME = @STG_SOURCE_LAST_UPDATE_DATE_TIME
								,LAST_UPDATE_DATE_TIME = GETDATE()
						WHERE	 SK_BRANCH_KEY = @DWH_SK_BRANCH_KEY

						SET @UPD_CNT = @UPD_CNT + 1
					END
		 END

	 --STEP 15 FETCH STAGING VALUE INTO VARIABLE
	 FETCH NEXT FROM MST_BRANCH_Cursor INTO @STG_BRANCH_CODE,@STG_BRANCH_REGION,@STG_BRANCH_NAME_THAI,@STG_BRANCH_NAME_ENGLISH,@STG_BRANCH_SHORT_NAME
										   ,@STG_BRANCH_ORDER,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME
										   ,@STG_DELETED_FLAG,@STG_SOURCE_LAST_UPDATE_DATE_TIME
 END

 --STEP 16 CLOSE CURSOR
 CLOSE MST_BRANCH_Cursor   
 DEALLOCATE MST_BRANCH_Cursor

 --STEP 17 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END

GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_CUST_REFINANCE]    Script Date: 01/03/2560 15:59:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [PPL].[STG2_DIM_CUST_REFINANCE]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_CUST_REFINANCE
 * Source Tables			:  -
 * Purpose					:  To replicate data to GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_REFINANCE
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2017-03-01     Perasan.A			  Creation of this initialization script.
 */

 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 PREPARE DATA FOR INSERT
 DECLARE @TMP_DATA table
 (
   CUST_REFINANCE_CODE bigint
  ,CUST_REFINANCE_DESC_THAI varchar(20)
  ,CUST_REFINANCE_DESC_ENGLISH varchar(20)
 )

 INSERT INTO @TMP_DATA 
 VALUES (-1,'UN-DEFINED','UN-DEFINED')
 INSERT INTO @TMP_DATA 
 VALUES (0,'1 ครั้ง','1 Times')
 INSERT INTO @TMP_DATA 
 VALUES (1,'2 ครั้ง','2 Times')
 INSERT INTO @TMP_DATA 
 VALUES (2,'3 ครั้ง','3 Times')
 INSERT INTO @TMP_DATA 
 VALUES (3,'4 ครั้ง','4 Times')
 INSERT INTO @TMP_DATA 
 VALUES (4,'5 ครั้ง','5 Times')
 INSERT INTO @TMP_DATA 
 VALUES (5,'6 ครั้ง','6 Times')
 INSERT INTO @TMP_DATA 
 VALUES (6,'7 ครั้ง','7 Times')
 INSERT INTO @TMP_DATA 
 VALUES (7,'8 ครั้ง','8 Times')
 INSERT INTO @TMP_DATA 
 VALUES (8,'9 ครั้ง','9 Times')
 INSERT INTO @TMP_DATA 
 VALUES (9,'10 ครั้ง','10 Times')
 INSERT INTO @TMP_DATA 
 VALUES (10,'11 ครั้ง','11 Times')

 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_REFINANCE WITH @TMP_DATA
 BEGIN
	MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_REFINANCE AS TARGET_TABLE
	USING	(
			 SELECT	 CUST_REFINANCE_CODE,CUST_REFINANCE_DESC_THAI,CUST_REFINANCE_DESC_ENGLISH
			 FROM	 @TMP_DATA
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.CUST_REFINANCE_CODE = SOURCE_TABLE.CUST_REFINANCE_CODE)
	WHEN MATCHED THEN
		UPDATE SET   CUST_REFINANCE_DESC_THAI = SOURCE_TABLE.CUST_REFINANCE_DESC_THAI
					,CUST_REFINANCE_DESC_ENGLISH = SOURCE_TABLE.CUST_REFINANCE_DESC_ENGLISH
					,JOB_RUN_KEY = @JOB_RUN_KEY
					,SOURCE_LAST_UPDATE_DATE_TIME = GETDATE()
					,LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (CUST_REFINANCE_CODE,CUST_REFINANCE_DESC_THAI,CUST_REFINANCE_DESC_ENGLISH,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME)
		VALUES (SOURCE_TABLE.CUST_REFINANCE_CODE,SOURCE_TABLE.CUST_REFINANCE_DESC_THAI,SOURCE_TABLE.CUST_REFINANCE_DESC_ENGLISH,@JOB_RUN_KEY,'','','N','',GETDATE(),GETDATE())
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

  --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_REFINANCE WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT 12 AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END

GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_CUST_SOURCE]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [PPL].[STG2_DIM_CUST_SOURCE]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_CUST_SOURCE
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_CUST_SOURCE
 * Purpose					:  To replicate data from GL_TNB_STG.STG.STG_TNB_MST_CUST_SOURCE to GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_SOURCE
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-06     Perasan.A			  Creation of this initialization script.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT
 DECLARE @DUM_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0
 SET @DUM_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_CUST_SOURCE WHERE JOB_RUN_KEY = @JOB_RUN_KEY


 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_SOURCE WITH GL_TNB_STG.STG.STG_TNB_MST_CUST_SOURCE
 BEGIN
	MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_SOURCE AS TARGET_TABLE
	USING	(
			 SELECT	 STG_CS.MDSC_COD,STG_CS.MDSC_DSC
					,ISNULL(CUST_SOURCE_DESC_ENG,'') CUST_SOURCE_DESC_ENG
					,STG_CS.JOB_RUN_KEY,STG_CS.SOURCE_SYSTEM_CODE,STG_CS.SOURCE_TABLE_NAME,STG_CS.DELETED_FLAG,STG_CS.SOURCE_LAST_UPDATE_DATE_TIME
			 FROM	 GL_TNB_STG.STG.STG_TNB_MST_CUST_SOURCE STG_CS LEFT OUTER JOIN 
					 GL_TNB_STG.LKP.LKP_TNB_CUST_SOURCE LKP_CS ON STG_CS.MDSC_COD = LKP_CS.CUST_SOURCE_CODE
			 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.CUST_SOURCE_CODE = SOURCE_TABLE.MDSC_COD)
	WHEN MATCHED THEN
		UPDATE SET   CUST_SOURCE_DESC = SOURCE_TABLE.MDSC_DSC
					,CUST_SOURCE_DESC_ENG = SOURCE_TABLE.CUST_SOURCE_DESC_ENG
					,JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY
					,SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE
					,SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME
					,DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG
					,SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
					,LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (CUST_SOURCE_CODE,CUST_SOURCE_DESC,CUST_SOURCE_DESC_ENG,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME)
		VALUES (SOURCE_TABLE.MDSC_COD,SOURCE_TABLE.MDSC_DSC,SOURCE_TABLE.CUST_SOURCE_DESC_ENG,SOURCE_TABLE.JOB_RUN_KEY,SOURCE_TABLE.SOURCE_SYSTEM_CODE,SOURCE_TABLE.SOURCE_TABLE_NAME,SOURCE_TABLE.DELETED_FLAG,'',SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

 --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_SOURCE WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 4 CHECK DUMMY RECORD (-1 UNDEFINE)
 SELECT	@DUM_CNT = COUNT(*) 
 FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_SOURCE
 WHERE	[CUST_SOURCE_CODE] = '-1'

 --STEP 5 INSERT DUMMY RECORD (-1 UNDEFINE)
 IF @DUM_CNT = 0
 BEGIN
	INSERT INTO [DIM].[DWH_TNB_DIM_CUST_SOURCE]
			   ([CUST_SOURCE_CODE]
			   ,[CUST_SOURCE_DESC]
			   ,[CUST_SOURCE_DESC_ENG]
			   ,[JOB_RUN_KEY]
			   ,[SOURCE_SYSTEM_CODE]
			   ,[SOURCE_TABLE_NAME]
			   ,[DELETED_FLAG]
			   ,[COMMENTS]
			   ,[SOURCE_LAST_UPDATE_DATE_TIME]
			   ,[LAST_UPDATE_DATE_TIME])
		 VALUES
			   (
				'-1'
			   ,'UN-DEFINED'
			   ,'UN-DEFINED'
			   ,'0'
			   ,''
			   ,''
			   ,''
			   ,''
			   ,GETDATE()
			   ,GETDATE()
			   )
 END

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END

GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_CUST_TYPE]    Script Date: 01/03/2560 15:57:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [PPL].[STG2_DIM_CUST_TYPE]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_CUST_TYPE
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_CUST_TYPE
 * Purpose					:  To replicate data from GL_TNB_STG.STG.STG_TNB_MST_CUST_TYPE to GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_TYPE
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2017-01-03     Perasan.A			  Creation of this initialization script.
 */

 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT
 DECLARE @DUM_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0
 SET @DUM_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_CUST_TYPE WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_TYPE WITH GL_TNB_STG.STG.STG_TNB_MST_CUST_TYPE
 BEGIN
	MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_TYPE AS TARGET_TABLE
	USING	(
			 SELECT	 STG_CT.MDSC_COD,STG_CT.MDSC_DSC
					,STG_CT.JOB_RUN_KEY,STG_CT.SOURCE_SYSTEM_CODE,STG_CT.SOURCE_TABLE_NAME,STG_CT.DELETED_FLAG,STG_CT.SOURCE_LAST_UPDATE_DATE_TIME
			 FROM	 GL_TNB_STG.STG.STG_TNB_MST_CUST_TYPE STG_CT
			 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.CUST_TYPE_CODE = SOURCE_TABLE.MDSC_COD)
	WHEN MATCHED THEN
		UPDATE SET   CUST_TYPE_DESC = SOURCE_TABLE.MDSC_DSC
					,JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY
					,SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE
					,SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME
					,DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG
					,SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
					,LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (CUST_TYPE_CODE,CUST_TYPE_DESC,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME)
		VALUES (SOURCE_TABLE.MDSC_COD,SOURCE_TABLE.MDSC_DSC,SOURCE_TABLE.JOB_RUN_KEY,SOURCE_TABLE.SOURCE_SYSTEM_CODE,SOURCE_TABLE.SOURCE_TABLE_NAME,SOURCE_TABLE.DELETED_FLAG,'',SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

 --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_TYPE WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 4 CHECK DUMMY RECORD (-1 UNDEFINE)
 SELECT	@DUM_CNT = COUNT(*) 
 FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_CUST_TYPE
 WHERE	[CUST_TYPE_CODE] = '-1'

 --STEP 5 INSERT DUMMY RECORD (-1 UNDEFINE)
 IF @DUM_CNT = 0
 BEGIN
	INSERT INTO [DIM].[DWH_TNB_DIM_CUST_TYPE]
			   ([CUST_TYPE_CODE]
			   ,[CUST_TYPE_DESC]
			   ,[JOB_RUN_KEY]
			   ,[SOURCE_SYSTEM_CODE]
			   ,[SOURCE_TABLE_NAME]
			   ,[DELETED_FLAG]
			   ,[COMMENTS]
			   ,[SOURCE_LAST_UPDATE_DATE_TIME]
			   ,[LAST_UPDATE_DATE_TIME])
		 VALUES
			   (
				'-1'
			   ,'UN-DEFINED'
			   ,'0'
			   ,''
			   ,''
			   ,''
			   ,''
			   ,GETDATE()
			   ,GETDATE()
			   )
 END

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END

GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_DEALER]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [PPL].[STG2_DIM_DEALER]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_DEALER
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_DEALER
 * Purpose					:  To replicate data from STG_TNB_MST_DEALER to DWH_TNB_DIM_DEALER (SCD TYPE 2)
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-08     Perasan.A			  Creation of this initialization script.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT
 DECLARE @DUM_CNT BIGINT

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0
 SET @DUM_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_DEALER WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 2 DECLARE VARIABLE FOR LOAD DATA
 DECLARE @STG_DEALER_CODE VARCHAR(10)
 DECLARE @STG_DEALER_GROUP VARCHAR(60)
 DECLARE @STG_DEALER_GROUP_ID VARCHAR(5)
 DECLARE @STG_DEALER_NAME_THAI VARCHAR(60)
 DECLARE @STG_DEALER_NAME_ENGLISH VARCHAR(60)
 DECLARE @STG_SOURCE_SYSTEM_CODE VARCHAR(10)
 DECLARE @STG_SOURCE_TABLE_NAME VARCHAR(20)
 DECLARE @STG_DELETED_FLAG VARCHAR(1)
 --DECLARE @STG_COMMENTS VARCHAR(500)
 DECLARE @STG_SOURCE_LAST_UPDATE_DATE_TIME DATETIME
 DECLARE @DWH_SK_DEALER_KEY BIGINT
 DECLARE @DWH_DEALER_GROUP VARCHAR(60)
 DECLARE @DWH_DEALER_GROUP_ID VARCHAR(5)
 DECLARE MST_DEALER_Cursor CURSOR FOR

 --STEP 3 PREPARE DATA FROM STAGING TABLE
 SELECT	 MDLR_DEALER_CODE AS DEALER_CODE
        ,ISNULL(DEALER_GROUP_NAME,'') AS DEALER_GROUP
		,ISNULL(DEALER_GROUP_ID,'') AS DEALER_GROUP_ID
		,ISNULL(ISNULL(DEALER_NAME_THAI,MDLR_DEALER_NAME_THAI),'') AS DEALER_NAME_THAI
		,ISNULL(ISNULL(DEALER_NAME_ENG,MDLR_DEALER_NAME_ENGLISH),'') AS DEALER_NAME_ENGLISH
		,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,STG_TNB_MST_DEALER.DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME
 FROM	 GL_TNB_STG.STG.STG_TNB_MST_DEALER LEFT OUTER JOIN 
		 GL_TNB_STG.LKP.LKP_TNB_MST_DEALER ON MDLR_DEALER_CODE = DEALER_CODE
 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 4 FETCH STAGING VALUE INTO VARIABLE
 OPEN MST_DEALER_Cursor
 FETCH NEXT FROM MST_DEALER_Cursor INTO @STG_DEALER_CODE,@STG_DEALER_GROUP,@STG_DEALER_GROUP_ID,@STG_DEALER_NAME_THAI,@STG_DEALER_NAME_ENGLISH
									   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME
									   ,@STG_DELETED_FLAG,@STG_SOURCE_LAST_UPDATE_DATE_TIME
 WHILE @@FETCH_STATUS = 0
 BEGIN
	 --STEP 5 GET MAX SURROGATE KEY FROM BUSINESS KEY (REFER TO DETAILS DESIGN DOCUMENT)
	 SELECT @DWH_SK_DEALER_KEY = ISNULL(MAX(SK_DEALER_KEY),0)
	 FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
	 WHERE	DEALER_CODE = @STG_DEALER_CODE



	 --STEP 6 CHECK RECORD EXIST FROM MAX SURROGATE KEY
	 IF @DWH_SK_DEALER_KEY = 0 
		 BEGIN
			--STEP 7 INSERT NEW RECORD OF DIMENSION TO TARGET
			INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER (DEALER_CODE,DEALER_GROUP,DEALER_GROUP_ID,DEALER_NAME_THAI,DEALER_NAME_ENGLISH
										   ,IS_ACTIVE,VALID_FROM,VALID_TO,JOB_RUN_KEY
										   ,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS
										   ,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME) 
						            VALUES (@STG_DEALER_CODE,@STG_DEALER_GROUP,@STG_DEALER_GROUP_ID,@STG_DEALER_NAME_THAI,@STG_DEALER_NAME_ENGLISH
								           ,'Y',CONVERT(DATE,'01/01/1900',103),CONVERT(DATE,'31/12/9999',103),@JOB_RUN_KEY
										   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME,@STG_DELETED_FLAG,''
										   ,@STG_SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())

			SET @INS_CNT = @INS_CNT + 1
		 END
	 ELSE
		BEGIN
			--STEP 8 SELECT FIELD FOR DETECT CHANGE (REFER TO DETAILS DESIGN DOCUMENT)
			SELECT	@DWH_DEALER_GROUP = DEALER_GROUP
			FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
			WHERE	SK_DEALER_KEY = @DWH_SK_DEALER_KEY

			--STEP 9 DETECT CHANGE COLUMNS (REFER TO DETAILS DESIGN DOCUMENT)
			IF (@STG_DEALER_GROUP <> @DWH_DEALER_GROUP) AND (@STG_DEALER_GROUP <> '') AND (@DWH_DEALER_GROUP <> '')
				BEGIN
					--STEP 10 UPDATE OLD RECORD STATUS OF DIMENSION TO INACTIVE AND VALID_TO
					UPDATE	GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
					SET		IS_ACTIVE = 'N',VALID_TO = CONVERT(DATE,CONVERT(VARCHAR(10),DATEADD(DAY,-1,GETDATE()),103),103)
					WHERE	SK_DEALER_KEY = @DWH_SK_DEALER_KEY

					--STEP 11 INSERT CHANGE RECORD OF DIMENSION TO TARGET TABLE ***VALID FROM
					INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER (DEALER_CODE,DEALER_GROUP,DEALER_GROUP_ID,DEALER_NAME_THAI,DEALER_NAME_ENGLISH
												   ,IS_ACTIVE,VALID_FROM,VALID_TO,JOB_RUN_KEY
												   ,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS
												   ,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME) 
											VALUES (@STG_DEALER_CODE,@STG_DEALER_GROUP,@STG_DEALER_GROUP_ID,@STG_DEALER_NAME_THAI,@STG_DEALER_NAME_ENGLISH
												   ,'Y',CONVERT(DATE,CONVERT(VARCHAR(10),GETDATE(),103),103),CONVERT(DATE,'31/12/9999',103),@JOB_RUN_KEY
												   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME,@STG_DELETED_FLAG,''
												   ,@STG_SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())

					SET @INS_CNT = @INS_CNT + 1
				END
			ELSE
				--STEP 12 IF THERE IS FILE MAPPING TO MAINTAIN CHECK NEW VALUE FROM MAINTAINANCE FILE
				IF (@DWH_DEALER_GROUP = '') AND (@STG_DEALER_GROUP <> '')
					BEGIN
						--STEP 13 UPDATE OLD RECORD VALUE WITH THE NEW VALUE (UPDATE DETECT CHANGE FIELD WITH THE NEW ONE THAT IS NOT NULL)
						UPDATE	 GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
						SET		 DEALER_GROUP = @STG_DEALER_GROUP
								,DEALER_GROUP_ID = @STG_DEALER_GROUP_ID
								,DEALER_NAME_THAI = @STG_DEALER_NAME_THAI
								,DEALER_NAME_ENGLISH = @STG_DEALER_NAME_ENGLISH
								,JOB_RUN_KEY = @JOB_RUN_KEY
								,SOURCE_SYSTEM_CODE = @STG_SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME = @STG_SOURCE_TABLE_NAME
								,DELETED_FLAG = @STG_DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME = @STG_SOURCE_LAST_UPDATE_DATE_TIME
								,LAST_UPDATE_DATE_TIME = GETDATE()
						WHERE	 SK_DEALER_KEY = @DWH_SK_DEALER_KEY

						SET @UPD_CNT = @UPD_CNT + 1
					END
				ELSE
					BEGIN
						--STEP 14 UPDATE OLD RECORD VALUE WITH THE NEW VALUE
						UPDATE	 GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
						SET		 DEALER_GROUP_ID = @STG_DEALER_GROUP_ID
								,DEALER_NAME_THAI = @STG_DEALER_NAME_THAI
								,DEALER_NAME_ENGLISH = @STG_DEALER_NAME_ENGLISH
								,JOB_RUN_KEY = @JOB_RUN_KEY
								,SOURCE_SYSTEM_CODE = @STG_SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME = @STG_SOURCE_TABLE_NAME
								,DELETED_FLAG = @STG_DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME = @STG_SOURCE_LAST_UPDATE_DATE_TIME
								,LAST_UPDATE_DATE_TIME = GETDATE()
						WHERE	 SK_DEALER_KEY = @DWH_SK_DEALER_KEY

						SET @UPD_CNT = @UPD_CNT + 1
					END
		END


	 --STEP 15 FETCH STAGING VALUE INTO VARIABLE
	 FETCH NEXT FROM MST_DEALER_Cursor INTO @STG_DEALER_CODE,@STG_DEALER_GROUP,@STG_DEALER_GROUP_ID,@STG_DEALER_NAME_THAI,@STG_DEALER_NAME_ENGLISH
										   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME
										   ,@STG_DELETED_FLAG,@STG_SOURCE_LAST_UPDATE_DATE_TIME
 END

 --STEP 16 CLOSE CURSOR
 CLOSE MST_DEALER_Cursor   
 DEALLOCATE MST_DEALER_Cursor

 --STEP 17 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 18 CHECK DUMMY RECORD (-1 UNDEFINE)
 SELECT	@DUM_CNT = COUNT(*) 
 FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
 WHERE	[DEALER_CODE] = '-1'

 --STEP 19 INSERT DUMMY RECORD (-1 UNDEFINE)
 IF @DUM_CNT = 0
 BEGIN
	INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
	(
		   [DEALER_CODE]
		  ,[DEALER_GROUP]
		  ,[DEALER_GROUP_ID]
		  ,[DEALER_NAME_THAI]
		  ,[DEALER_NAME_ENGLISH]
		  ,[IS_ACTIVE]
		  ,[VALID_FROM]
		  ,[VALID_TO]
		  ,[JOB_RUN_KEY]
		  ,[SOURCE_SYSTEM_CODE]
		  ,[SOURCE_TABLE_NAME]
		  ,[DELETED_FLAG]
		  ,[COMMENTS]
		  ,[SOURCE_LAST_UPDATE_DATE_TIME]
		  ,[LAST_UPDATE_DATE_TIME]
	)
		 VALUES
			   (
				'-1'
			   ,'UN-DEFINED'
			   ,'9999'
			   ,'UN-DEFINED'
			   ,'UN-DEFINED'
			   ,'Y'
			   ,CONVERT(DATE,'01/01/1900',103)
			   ,CONVERT(DATE,'31/12/9999',103)
			   ,'0'
			   ,''
			   ,''
			   ,''
			   ,''
			   ,GETDATE()
			   ,GETDATE()
			   )
 END

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END

GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_PRODUCT]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [PPL].[STG2_DIM_PRODUCT]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_PRODUCT
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_PRODUCT
 * Purpose					:  To replicate data from STG_TNB_MST_PRODUCT to DWH_TNB_DIM_PRODUCT (SCD TYPE 2)
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-08     Nattida.H			  
 */
 
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) 
 FROM GL_TNB_STG.STG.STG_TNB_MST_PRODUCT 
 WHERE JOB_RUN_KEY = @JOB_RUN_KEY
 
 --STEP 2 DECLARE VARIABLE FOR LOAD DATA
 DECLARE @STG_PRODUCT_CODE VARCHAR(30)
 DECLARE @STG_PRODUCT_NAME VARCHAR(10)
 DECLARE @STG_SUB_PRODUCT_NAME VARCHAR(80)
 DECLARE @STG_SOURCE_SYSTEM_CODE VARCHAR(10)
 DECLARE @STG_SOURCE_TABLE_NAME VARCHAR(20)
 DECLARE @STG_DELETED_FLAG VARCHAR(1)
 DECLARE @STG_SOURCE_LAST_UPDATE_DATE_TIME DATETIME
 DECLARE @DWH_SK_PRODUCT_KEY BIGINT 
 DECLARE @DWH_PRODUCT_NAME VARCHAR(10)
 DECLARE @DWH_SUB_PRODUCT_NAME VARCHAR(80)

 DECLARE MST_PRODUCT_Cursor CURSOR FOR
	 --STEP 3 PREPARE DATA FROM STAGING TABLE
	 SELECT	 MDSC_COD AS PRODUCT_CODE, 
			 MDSC_MTN_TERMINAL_ID AS PRODUCT_NAME,
			 MDSC_DSC AS SUB_PRODUCT_NAME, 
			 SOURCE_SYSTEM_CODE,
			 SOURCE_TABLE_NAME,
			 DELETED_FLAG,
			 SOURCE_LAST_UPDATE_DATE_TIME
	 FROM	 GL_TNB_STG.STG.STG_TNB_MST_PRODUCT
	 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 4 FETCH STAGING VALUE INTO VARIABLE
 OPEN MST_PRODUCT_Cursor
 FETCH NEXT FROM MST_PRODUCT_Cursor INTO @STG_PRODUCT_CODE,
                                         @STG_PRODUCT_NAME,
										 @STG_SUB_PRODUCT_NAME,
										 @STG_SOURCE_SYSTEM_CODE,
										 @STG_SOURCE_TABLE_NAME,
										 @STG_DELETED_FLAG,
										 @STG_SOURCE_LAST_UPDATE_DATE_TIME
 WHILE @@FETCH_STATUS = 0
 BEGIN

	 --STEP 5 GET MAX SURROGATE KEY FROM BUSINESS KEY (REFER TO DETAILS DESIGN DOCUMENT)
	 SELECT @DWH_SK_PRODUCT_KEY = ISNULL(MAX(SK_PRODUCT_KEY),0)
	 FROM	DWH_TNB_DIM_PRODUCT
	 WHERE	PRODUCT_CODE = @STG_PRODUCT_CODE

	 --STEP 6 CHECK RECORD EXIST FROM MAX SURROGATE KEY
	 IF @DWH_SK_PRODUCT_KEY = 0 
		 BEGIN
			--STEP 7 INSERT NEW RECORD OF DIMENSION TO TARGET
			INSERT INTO DWH_TNB_DIM_PRODUCT (PRODUCT_CODE, 
			                                 PRODUCT_NAME, 
											 SUB_PRODUCT_NAME, 
											 IS_ACTIVE, 
											 VALID_FROM, 
											 VALID_TO, 
											 JOB_RUN_KEY,
											 SOURCE_SYSTEM_CODE, 
											 SOURCE_TABLE_NAME, 
											 DELETED_FLAG, 
											 COMMENTS,
											 SOURCE_LAST_UPDATE_DATE_TIME, 
											 LAST_UPDATE_DATE_TIME) 
						            VALUES (@STG_PRODUCT_CODE,
									        @STG_PRODUCT_NAME,
											@STG_SUB_PRODUCT_NAME,
											'Y',
									        CONVERT(DATE,'01/01/1900',103),
											CONVERT(DATE,'31/12/9999',103),
											@JOB_RUN_KEY,
											@STG_SOURCE_SYSTEM_CODE,
											@STG_SOURCE_TABLE_NAME,
											@STG_DELETED_FLAG,
											'',
											@STG_SOURCE_LAST_UPDATE_DATE_TIME,
										   GETDATE())

			SET @INS_CNT = @INS_CNT + 1
		 END
	 ELSE
		 BEGIN
			--STEP 8 SELECT FIELD FOR DETECT CHANGE (REFER TO DETAILS DESIGN DOCUMENT)
			SELECT	@DWH_PRODUCT_NAME = PRODUCT_NAME,
			        @DWH_SUB_PRODUCT_NAME = SUB_PRODUCT_NAME
			FROM	DWH_TNB_DIM_PRODUCT
			WHERE	SK_PRODUCT_KEY = @DWH_SK_PRODUCT_KEY

			--STEP 9 DETECT CHANGE COLUMNS (REFER TO DETAILS DESIGN DOCUMENT)
			IF @STG_PRODUCT_NAME <> @DWH_PRODUCT_NAME OR @STG_SUB_PRODUCT_NAME <> @DWH_SUB_PRODUCT_NAME
				BEGIN
					--STEP 10 UPDATE OLD RECORD STATUS OF DIMENSION TO INACTIVE AND VALID_TO
					UPDATE	DWH_TNB_DIM_PRODUCT
					SET		IS_ACTIVE = 'N',
					        VALID_TO = CONVERT(DATE,CONVERT(VARCHAR(10),DATEADD(DAY,-1,GETDATE()),103),103)
					WHERE	SK_PRODUCT_KEY = @DWH_SK_PRODUCT_KEY

					--STEP 11 INSERT CHANGE RECORD OF DIMENSION TO TARGET TABLE ***VALID FROM
					INSERT INTO DWH_TNB_DIM_PRODUCT (PRODUCT_CODE,
					                                 PRODUCT_NAME,
													 SUB_PRODUCT_NAME, 
													 IS_ACTIVE,
													 VALID_FROM,
													 VALID_TO,
													 JOB_RUN_KEY,
													 SOURCE_SYSTEM_CODE,
													 SOURCE_TABLE_NAME,
													 DELETED_FLAG,
													 COMMENTS,
													 SOURCE_LAST_UPDATE_DATE_TIME,
													 LAST_UPDATE_DATE_TIME) 
											VALUES (@STG_PRODUCT_CODE,
											        @STG_PRODUCT_NAME,
													@STG_SUB_PRODUCT_NAME, 
													'Y',
											        CONVERT(DATE,CONVERT(VARCHAR(10),
													GETDATE(),103),103),
													CONVERT(DATE,'31/12/9999',103),
													@JOB_RUN_KEY
												   ,@STG_SOURCE_SYSTEM_CODE,
												   @STG_SOURCE_TABLE_NAME,
												   @STG_DELETED_FLAG,
												   '',
												   @STG_SOURCE_LAST_UPDATE_DATE_TIME,
												   GETDATE())
					SET @INS_CNT = @INS_CNT + 1
				END
			ELSE
				BEGIN
					--STEP 12 UPDATE OLD RECORD VALUE WITH THE NEW VALUE
					UPDATE	 DWH_TNB_DIM_PRODUCT
					SET		 JOB_RUN_KEY = @JOB_RUN_KEY,
					         SOURCE_SYSTEM_CODE = @STG_SOURCE_SYSTEM_CODE,
							 SOURCE_TABLE_NAME = @STG_SOURCE_TABLE_NAME,
							 DELETED_FLAG = @STG_DELETED_FLAG,
							 SOURCE_LAST_UPDATE_DATE_TIME = @STG_SOURCE_LAST_UPDATE_DATE_TIME,
							 LAST_UPDATE_DATE_TIME = GETDATE()
					WHERE	 SK_PRODUCT_KEY = @DWH_SK_PRODUCT_KEY

					SET @UPD_CNT = @UPD_CNT + 1
				END
			
		 END

	 --STEP 13 FETCH STAGING VALUE INTO VARIABLE
	 FETCH NEXT FROM MST_PRODUCT_Cursor INTO @STG_PRODUCT_CODE,
	                                         @STG_PRODUCT_NAME,
											 @STG_SUB_PRODUCT_NAME,
											 @STG_SOURCE_SYSTEM_CODE,
											 @STG_SOURCE_TABLE_NAME,
											 @STG_DELETED_FLAG,
											 @STG_SOURCE_LAST_UPDATE_DATE_TIME
 END

 --STEP 14 CLOSE CURSOR
 CLOSE MST_PRODUCT_Cursor   
 DEALLOCATE MST_PRODUCT_Cursor

 --STEP 15 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) 
 FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_PRODUCT 
 WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,
	       @DWH_CNT AS COUNT_WAREHOUSE,
	       @UPD_CNT AS ROWS_UPDATED,
		   @INS_CNT AS ROWS_INSERT
END
GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_REQUEST_STATUS]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [PPL].[STG2_DIM_REQUEST_STATUS]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_REQUEST_STATUS
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS
 * Purpose					:  To replicate data from GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS to GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-06     Perasan.A			  Creation of this initialization script.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS WHERE JOB_RUN_KEY = @JOB_RUN_KEY


 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS WITH GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS
 BEGIN
	MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS AS TARGET_TABLE
	USING	(
			 SELECT	 MDSC_COD,MDSC_DSC
					,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME
			 FROM	 GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS 
			 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.REQUEST_STATUS_CODE = SOURCE_TABLE.MDSC_COD)
	WHEN MATCHED THEN
		UPDATE SET   REQUEST_STATUS_DESC = SOURCE_TABLE.MDSC_DSC
					,JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY
					,SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE
					,SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME
					,DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG
					,SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
					,LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (REQUEST_STATUS_CODE,REQUEST_STATUS_DESC,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME)
		VALUES (SOURCE_TABLE.MDSC_COD,SOURCE_TABLE.MDSC_DSC,SOURCE_TABLE.JOB_RUN_KEY,SOURCE_TABLE.SOURCE_SYSTEM_CODE,SOURCE_TABLE.SOURCE_TABLE_NAME,SOURCE_TABLE.DELETED_FLAG,'',SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

  --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END





GO
/****** Object:  StoredProcedure [PPL].[STG2_FCT_APP_CONTRACT]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [PPL].[STG2_FCT_APP_CONTRACT]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_FCT_APP_CONTRACT
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION LEFT OUTER JOIN GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT ON MLMH_REQ_DOC = MLHP_REQ_DOC
 * Purpose					:  To replicate data from STG_TNB_TRN_APPLICATION,STG_TNB_TRN_CONTRACT to GL_TNB_DWH.FCT.DWH_TNB_FCT_APP_CONTRACT
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-08     Perasan.A			  Creation of this initialization script.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_FCT_APP_CONTRACT WITH GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION
 BEGIN
	MERGE GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT AS TARGET_TABLE
	USING	(
			 SELECT	 MLMH_REQ_DOC AS REQ_DOC,MLMH_DOC_NO AS DOC_NO
					,MLMH_CHECK_DIGIT AS CHECK_DIGIT		
					,MLMH_PROJECT_CODE AS PRODUCT_CODE
					,ISNULL(BRANCH_CODE,'T025') AS BRANCH_CODE
					,ISNULL(DEALER_CODE,-1) AS DEALER_CODE
					,ISNULL(MLMH_CUSTOMER_COME_FROM,-1) AS CUST_SOURCE_CODE
					,ISNULL(MLMH_REQUEST_STATUS,-1) AS REQUEST_STATUS
					,ISNULL(MLMH_REC_STS,'C') AS REC_STATUS
					,CASE
						WHEN (MLMH_REC_STS = 'C' OR MLMH_REC_STS IS NULL OR MLMH_REC_STS = '') AND (MLMH_REJECT_FLAG <> '1' AND MLMH_REJECT_FLAG <> '2') THEN '2'
						ELSE MLMH_REJECT_FLAG
					 END AS REJECT_FLAG
					,CASE 
						WHEN MLMH_REJECT_FLAG = '1' THEN 'Reject' 
						WHEN MLMH_REJECT_FLAG = '2' THEN 'Cancel' 
						WHEN (MLMH_REC_STS = 'C' OR MLMH_REC_STS IS NULL OR MLMH_REC_STS = '') AND (MLMH_REJECT_FLAG <> '1' AND MLMH_REJECT_FLAG <> '2') THEN 'Cancel' 
						ELSE 'Normal'
					 END AS REJECT_DESC
					,ISNULL(MLHP_REFINAN_NUM,-1) AS CUST_REFINANCE_CODE
					,ISNULL(MLHP_CUSTYPE_FROM,'-1') AS CUST_TYPE_CODE
					,ISNULL(MLHP_BEG_INVENSTMENT_AMT,0) AS FINANCIAL_AMOUNT
					,ISNULL(MLHP_PAY_PERIOD_AMOUNT,0) AS INSTALLMENT_AMOUNT
					,ISNULL(MLHP_VAT_PAY_PERIOD,0) AS VAT_AMOUNT
					,ISNULL(MLHP_HIRING_CHARGE,0) AS INTEREST_AMOUNT
					,ISNULL(MLMH_PERIOD_INSTALL_PRINCIPAL,0) AS TOTAL_TERM
					,ISNULL(MLHP_FLAT_RATE_PER_MONTH,0) AS FLAT_RATE
					,ISNULL(MLHP_NET_EFFECTIVE_RATE,0) AS EFFECTIVE_RATE
					,MLMH_DOC_DATE AS DOC_DATE,MLMH_APPROVE_LOAN_DATE AS APPROVE_LOAN_DATE
					,MLMH_APPROVE_REQUEST_DATE AS APPROVE_REQUEST_DATE
					,MLMH_CANCEL_DATE AS CANCEL_DATE
					,CASE
						WHEN (MLMH_REQUEST_STATUS < '@m') AND (MLMH_REJECT_FLAG <> '1' AND MLMH_REJECT_FLAG <> '2') THEN CONVERT(DATE,MLMH_DOC_DATE)
						ELSE CONVERT(DATE,'01/01/1900',103)
					 END AS WAITING_DATE
					,CASE
						WHEN (MLMH_REQUEST_STATUS >= '@m') AND (MLMH_REJECT_FLAG <> '1' AND MLMH_REJECT_FLAG <> '2') AND (MLMH_STATUS_FLAG = '' OR MLMH_STATUS_FLAG IS NULL) THEN CONVERT(DATE,MLMH_DOC_DATE)
						ELSE CONVERT(DATE,'01/01/1900',103)
					 END AS PENDING_PAYMENT_DATE
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.JOB_RUN_KEY
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.SOURCE_SYSTEM_CODE
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.SOURCE_TABLE_NAME
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.DELETED_FLAG
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.SOURCE_LAST_UPDATE_DATE_TIME
					,MLMH_START_PAY_PRINCIPAL_DATE AS FIRST_DUE_DATE
					,MLMH_LST_PAY_PERIOD_PRINCIPAL AS LAST_PAY_PERIOD
					,MLMH_REPO_DATE AS REPO_DATE
					,MLMH_NEXT_PAY_PRINCIPAL_DATE AS NEXT_DUE_DATE
			 FROM	 GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION LEFT OUTER JOIN 
					 (
					  SELECT *
							,CASE
								WHEN (MLHP_DEALER_CODE IS NULL) OR (MLHP_DEALER_CODE = '') THEN MLHP_FROM_SHOWROOM
								ELSE MLHP_DEALER_CODE
							 END AS MLHP_DEALER_CODE_2
					  FROM	 GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT
					 ) AS STG_TNB_TRN_CONTRACT_TMP
					 ON MLMH_REQ_DOC = MLHP_REQ_DOC AND GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.JOB_RUN_KEY = STG_TNB_TRN_CONTRACT_TMP.JOB_RUN_KEY LEFT OUTER JOIN
					(
					 SELECT MDLR_DEALER_CODE AS BRANCH_CODE
					 FROM	GL_TNB_STG.STG.STG_TNB_MST_BRANCH
					 WHERE	JOB_RUN_KEY = @MST_JOB_RUN_KEY
					) AS BRANCH ON MLHP_DEALER_CODE = BRANCH_CODE LEFT OUTER JOIN 
					(
					 SELECT MDLR_DEALER_CODE AS DEALER_CODE
					 FROM	GL_TNB_STG.STG.STG_TNB_MST_DEALER
					 WHERE	JOB_RUN_KEY = @MST_JOB_RUN_KEY
					) AS DEALER ON MLHP_DEALER_CODE_2 = DEALER_CODE 
			 WHERE	 GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.JOB_RUN_KEY = @TRN_JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.REQ_DOC = SOURCE_TABLE.REQ_DOC)
	WHEN MATCHED THEN
		UPDATE SET   DOC_NO = SOURCE_TABLE.DOC_NO,
					 CHECK_DIGIT = SOURCE_TABLE.CHECK_DIGIT,
					 PRODUCT_CODE = SOURCE_TABLE.PRODUCT_CODE,
					 BRANCH_CODE = SOURCE_TABLE.BRANCH_CODE,
					 DEALER_CODE = SOURCE_TABLE.DEALER_CODE,
					 CUST_SOURCE_CODE = SOURCE_TABLE.CUST_SOURCE_CODE,
					 REQUEST_STATUS = SOURCE_TABLE.REQUEST_STATUS,
					 REC_STATUS = SOURCE_TABLE.REC_STATUS,
					 REJECT_FLAG = SOURCE_TABLE.REJECT_FLAG,
					 REJECT_DESC = SOURCE_TABLE.REJECT_DESC,
					 CUST_REFINANCE_CODE = SOURCE_TABLE.CUST_REFINANCE_CODE,
					 CUST_TYPE_CODE = SOURCE_TABLE.CUST_TYPE_CODE,
					 FINANCIAL_AMOUNT = SOURCE_TABLE.FINANCIAL_AMOUNT,
					 INSTALLMENT_AMOUNT = SOURCE_TABLE.INSTALLMENT_AMOUNT,
					 VAT_AMOUNT = SOURCE_TABLE.VAT_AMOUNT,
					 INTEREST_AMOUNT = SOURCE_TABLE.INTEREST_AMOUNT,
					 TOTAL_TERM = SOURCE_TABLE.TOTAL_TERM,
					 FLAT_RATE = SOURCE_TABLE.FLAT_RATE,
					 EFFECTIVE_RATE = SOURCE_TABLE.EFFECTIVE_RATE,
					 DOC_DATE = SOURCE_TABLE.DOC_DATE,
					 APPROVE_LOAN_DATE = SOURCE_TABLE.APPROVE_LOAN_DATE,
					 APPROVE_REQUEST_DATE = SOURCE_TABLE.APPROVE_REQUEST_DATE,
					 CANCEL_DATE = SOURCE_TABLE.CANCEL_DATE,
					 JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY,
					 SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE,
					 SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME,
					 DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG,
					 SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,
					 LAST_UPDATE_DATE_TIME = GETDATE(),
					 FIRST_DUE_DATE = SOURCE_TABLE.FIRST_DUE_DATE,
					 LAST_PAY_PERIOD = SOURCE_TABLE.LAST_PAY_PERIOD,
					 REPO_DATE = SOURCE_TABLE.REPO_DATE,
					 NEXT_DUE_DATE = SOURCE_TABLE.NEXT_DUE_DATE
	WHEN NOT MATCHED THEN
		INSERT (
				 REQ_DOC
				,DOC_NO
				,CHECK_DIGIT
				,PRODUCT_CODE
				,BRANCH_CODE
				,DEALER_CODE
				,CUST_SOURCE_CODE
				,REQUEST_STATUS
				,REC_STATUS
				,REJECT_FLAG
				,REJECT_DESC
				,CUST_REFINANCE_CODE
				,CUST_TYPE_CODE
				,FINANCIAL_AMOUNT
				,INSTALLMENT_AMOUNT
				,VAT_AMOUNT
				,INTEREST_AMOUNT
				,TOTAL_TERM
				,FLAT_RATE
				,EFFECTIVE_RATE
				,DOC_DATE
				,APPROVE_LOAN_DATE
				,APPROVE_REQUEST_DATE
				,CANCEL_DATE
				,WAITING_DATE
				,PENDING_PAYMENT_DATE
				,JOB_RUN_KEY
				,SOURCE_SYSTEM_CODE
				,SOURCE_TABLE_NAME
				,DELETED_FLAG
				,SOURCE_LAST_UPDATE_DATE_TIME
				,LAST_UPDATE_DATE_TIME
				,FIRST_DUE_DATE
				,LAST_PAY_PERIOD
				,REPO_DATE
				,NEXT_DUE_DATE
				)
		VALUES (
				 SOURCE_TABLE.REQ_DOC
				,SOURCE_TABLE.DOC_NO
				,SOURCE_TABLE.CHECK_DIGIT
				,SOURCE_TABLE.PRODUCT_CODE
				,SOURCE_TABLE.BRANCH_CODE
				,SOURCE_TABLE.DEALER_CODE
				,SOURCE_TABLE.CUST_SOURCE_CODE
				,SOURCE_TABLE.REQUEST_STATUS
				,SOURCE_TABLE.REC_STATUS
				,SOURCE_TABLE.REJECT_FLAG
				,SOURCE_TABLE.REJECT_DESC
				,SOURCE_TABLE.CUST_REFINANCE_CODE
				,SOURCE_TABLE.CUST_TYPE_CODE
				,SOURCE_TABLE.FINANCIAL_AMOUNT
				,SOURCE_TABLE.INSTALLMENT_AMOUNT
				,SOURCE_TABLE.VAT_AMOUNT
				,SOURCE_TABLE.INTEREST_AMOUNT
				,SOURCE_TABLE.TOTAL_TERM
				,SOURCE_TABLE.FLAT_RATE
				,SOURCE_TABLE.EFFECTIVE_RATE
				,SOURCE_TABLE.DOC_DATE
				,SOURCE_TABLE.APPROVE_LOAN_DATE
				,SOURCE_TABLE.APPROVE_REQUEST_DATE
				,SOURCE_TABLE.CANCEL_DATE
				,SOURCE_TABLE.WAITING_DATE
				,SOURCE_TABLE.PENDING_PAYMENT_DATE
				,SOURCE_TABLE.JOB_RUN_KEY
				,SOURCE_TABLE.SOURCE_SYSTEM_CODE
				,SOURCE_TABLE.SOURCE_TABLE_NAME
				,SOURCE_TABLE.DELETED_FLAG
				,SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
				,GETDATE()
				,SOURCE_TABLE.FIRST_DUE_DATE
				,SOURCE_TABLE.LAST_PAY_PERIOD
				,SOURCE_TABLE.REPO_DATE
				,SOURCE_TABLE.NEXT_DUE_DATE
				)

	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

 --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 ----STEP 4 DELETE GABAGE (SB JAN 2015)
 --BEGIN
	--DELETE GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT WHERE DOC_NO = 581208005300
 --END

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END
GO
/****** Object:  StoredProcedure [PPL].[STG2_FCT_CONTRACT_MONTHLY]    Script Date: 10/11/2559 11:31:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [PPL].[STG2_FCT_CONTRACT_MONTHLY]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_FCT_CONTRACT_MONTHLY
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND
 * Purpose					:  To replicate data from GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND to GL_TNB_DWH.FCT.DWH_TNB_FCT_CONTRACT_MONTHLY
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-09     Perasan.A			  Creation of this initialization script.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_FCT_CONTRACT_MONTHLY WITH GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND
 BEGIN

	MERGE GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY AS TARGET_TABLE
	USING	(
			 SELECT	 MSOL_YEAR AS DATA_YEAR
					,MSOL_MONTH AS DATA_MONTH
					,MSOL_DOC_NO AS DOC_NO
					,CONVERT(DATE,DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,CONVERT(DATE,'01/' + CONVERT(VARCHAR(2),MSOL_MONTH) + '/' + CONVERT(VARCHAR(4),MSOL_YEAR),103))+1,0))) AS DATA_DATE
					,MSOL_REC_STS AS REC_STATUS
					,MSOL_CHECK_DIGIT AS CHECK_DIGIT
					,MSOL_REPO_DATE AS REPO_DATE
					,MSOL_STATUS_FLAG AS ACCOUNT_STATUS_CODE
					,MSOL_CHANGE_STATUS_DATE AS CHANGE_STATUS_DATE
					,MSOL_GRADE AS BOT_CLASS_CODE
					,ISNULL(MSOL_OS_UID_PRINCIPAL,0) AS OS_UID_PRINCIPAL
					,ISNULL(MSOL_OS_BAL,0) AS OS_BAL
					,ISNULL(MSOL_OS_UID1_UNEARN,0) AS OS_UID1_UNEARN
					,ISNULL(MSOL_OS_UID1_SURPLUS,0) AS OS_UID1_SURPLUS
					,ISNULL(MSOL_OS_UID1_OTHER,0) AS OS_UID1_OTHER
					,ISNULL(MSOL_OS_UID1_AMOUNT,0) AS OS_UID1_AMOUNT
					,ISNULL(MSOL_UNEARN_OTHER,0) AS UNEARN_OTHER
					,ISNULL(MSOL_REALIZE_UNPAID_UNEARN,0) AS REALIZE_UNPAID_UNEARN
					,ISNULL(MSOL_REALIZE_UNPAID_SURPLUS,0) AS REALIZE_UNPAID_SURPLUS
					,ISNULL(MSOL_REALIZE_UNPAID_OTHER,0) AS REALIZE_UNPAID_OTHER
					,ISNULL(MSOL_REALIZED_UNPAID,0) AS REALIZED_UNPAID
					,ISNULL(MSOL_EOM_UNEARN,0) AS EOM_UNEARN
					,ISNULL(MSOL_EOM_SURPLUS,0) AS EOM_SURPLUS
					,ISNULL(MSOL_EOM_OTHER,0) AS EOM_OTHER
					,ISNULL(MSOL_ACCRUED_EOM,0) AS ACCRUED_EOM
					,ISNULL(MSOL_REVERSE_UNEARN,0) AS REVERSE_UNEARN
					,ISNULL(MSOL_REVERSE_SURPLUS,0) AS REVERSE_SURPLUS
					,ISNULL(MSOL_REVERSE_OTHER,0) AS REVERSE_OTHER
					,ISNULL(MSOL_REVERSE_UID_AMT,0) AS REVERSE_UID_AMT
					,JOB_RUN_KEY
					,SOURCE_SYSTEM_CODE
					,SOURCE_TABLE_NAME
					,DELETED_FLAG
					,SOURCE_LAST_UPDATE_DATE_TIME
			 FROM	 GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND
			 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.DATA_YEAR = SOURCE_TABLE.DATA_YEAR AND TARGET_TABLE.DATA_MONTH = SOURCE_TABLE.DATA_MONTH AND TARGET_TABLE.DOC_NO = SOURCE_TABLE.DOC_NO AND TARGET_TABLE.CHECK_DIGIT = SOURCE_TABLE.CHECK_DIGIT)
	WHEN MATCHED THEN
		UPDATE SET  DATA_YEAR = SOURCE_TABLE.DATA_YEAR,
					DATA_MONTH = SOURCE_TABLE.DATA_MONTH,
					DOC_NO = SOURCE_TABLE.DOC_NO,
					DATA_DATE = SOURCE_TABLE.DATA_DATE,
					REC_STATUS = SOURCE_TABLE.REC_STATUS,
					CHECK_DIGIT = SOURCE_TABLE.CHECK_DIGIT,
					REPO_DATE = SOURCE_TABLE.REPO_DATE,
					ACCOUNT_STATUS_CODE = SOURCE_TABLE.ACCOUNT_STATUS_CODE,
					CHANGE_STATUS_DATE = SOURCE_TABLE.CHANGE_STATUS_DATE,
					BOT_CLASS_CODE = SOURCE_TABLE.BOT_CLASS_CODE,
					OS_UID_PRINCIPAL = SOURCE_TABLE.OS_UID_PRINCIPAL,
					OS_BAL = SOURCE_TABLE.OS_BAL,
					OS_UID1_UNEARN = SOURCE_TABLE.OS_UID1_UNEARN,
					OS_UID1_SURPLUS = SOURCE_TABLE.OS_UID1_SURPLUS,
					OS_UID1_OTHER = SOURCE_TABLE.OS_UID1_OTHER,
					OS_UID1_AMOUNT = SOURCE_TABLE.OS_UID1_AMOUNT,
					UNEARN_OTHER = SOURCE_TABLE.UNEARN_OTHER,
					REALIZE_UNPAID_UNEARN = SOURCE_TABLE.REALIZE_UNPAID_UNEARN,
					REALIZE_UNPAID_SURPLUS = SOURCE_TABLE.REALIZE_UNPAID_SURPLUS,
					REALIZE_UNPAID_OTHER = SOURCE_TABLE.REALIZE_UNPAID_OTHER,
					REALIZED_UNPAID = SOURCE_TABLE.REALIZED_UNPAID,
					EOM_UNEARN = SOURCE_TABLE.EOM_UNEARN,
					EOM_SURPLUS = SOURCE_TABLE.EOM_SURPLUS,
					EOM_OTHER = SOURCE_TABLE.EOM_OTHER,
					ACCRUED_EOM = SOURCE_TABLE.ACCRUED_EOM,
					REVERSE_UNEARN = SOURCE_TABLE.REVERSE_UNEARN,
					REVERSE_SURPLUS = SOURCE_TABLE.REVERSE_SURPLUS,
					REVERSE_OTHER = SOURCE_TABLE.REVERSE_OTHER,
					REVERSE_UID_AMT = SOURCE_TABLE.REVERSE_UID_AMT,
					JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY,
					SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE,
					SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME,
					DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG,
					SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,
					LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (
				 DATA_YEAR
				,DATA_MONTH
				,DOC_NO
				,DATA_DATE
				,REC_STATUS
				,CHECK_DIGIT
				,REPO_DATE
				,ACCOUNT_STATUS_CODE
				,CHANGE_STATUS_DATE
				,BOT_CLASS_CODE
				,OS_UID_PRINCIPAL
				,OS_BAL
				,OS_UID1_UNEARN
				,OS_UID1_SURPLUS
				,OS_UID1_OTHER
				,OS_UID1_AMOUNT
				,UNEARN_OTHER
				,REALIZE_UNPAID_UNEARN
				,REALIZE_UNPAID_SURPLUS
				,REALIZE_UNPAID_OTHER
				,REALIZED_UNPAID
				,EOM_UNEARN
				,EOM_SURPLUS
				,EOM_OTHER
				,ACCRUED_EOM
				,REVERSE_UNEARN
				,REVERSE_SURPLUS
				,REVERSE_OTHER
				,REVERSE_UID_AMT
				,JOB_RUN_KEY
				,SOURCE_SYSTEM_CODE
				,SOURCE_TABLE_NAME
				,DELETED_FLAG
				,SOURCE_LAST_UPDATE_DATE_TIME
				,LAST_UPDATE_DATE_TIME
				)
		VALUES (
				 SOURCE_TABLE.DATA_YEAR
				,SOURCE_TABLE.DATA_MONTH
				,SOURCE_TABLE.DOC_NO
				,SOURCE_TABLE.DATA_DATE
				,SOURCE_TABLE.REC_STATUS
				,SOURCE_TABLE.CHECK_DIGIT
				,SOURCE_TABLE.REPO_DATE
				,SOURCE_TABLE.ACCOUNT_STATUS_CODE
				,SOURCE_TABLE.CHANGE_STATUS_DATE
				,SOURCE_TABLE.BOT_CLASS_CODE
				,SOURCE_TABLE.OS_UID_PRINCIPAL
				,SOURCE_TABLE.OS_BAL
				,SOURCE_TABLE.OS_UID1_UNEARN
				,SOURCE_TABLE.OS_UID1_SURPLUS
				,SOURCE_TABLE.OS_UID1_OTHER
				,SOURCE_TABLE.OS_UID1_AMOUNT
				,SOURCE_TABLE.UNEARN_OTHER
				,SOURCE_TABLE.REALIZE_UNPAID_UNEARN
				,SOURCE_TABLE.REALIZE_UNPAID_SURPLUS
				,SOURCE_TABLE.REALIZE_UNPAID_OTHER
				,SOURCE_TABLE.REALIZED_UNPAID
				,SOURCE_TABLE.EOM_UNEARN
				,SOURCE_TABLE.EOM_SURPLUS
				,SOURCE_TABLE.EOM_OTHER
				,SOURCE_TABLE.ACCRUED_EOM
				,SOURCE_TABLE.REVERSE_UNEARN
				,SOURCE_TABLE.REVERSE_SURPLUS
				,SOURCE_TABLE.REVERSE_OTHER
				,SOURCE_TABLE.REVERSE_UID_AMT
				,SOURCE_TABLE.JOB_RUN_KEY
				,SOURCE_TABLE.SOURCE_SYSTEM_CODE
				,SOURCE_TABLE.SOURCE_TABLE_NAME
				,SOURCE_TABLE.DELETED_FLAG
				,SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
				,GETDATE()
				)
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

  --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END
GO
