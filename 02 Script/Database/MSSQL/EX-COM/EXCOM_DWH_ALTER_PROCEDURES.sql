USE [GL_TNB_DWH]

GO

DROP PROCEDURE [PPL].[STG2_FCT_CONTRACT_MONTHLY]
DROP PROCEDURE [PPL].[STG2_FCT_APP_CONTRACT]
DROP PROCEDURE [PPL].[STG2_DIM_BRANCH]
DROP PROCEDURE [PPL].[STG2_DIM_DEALER]
DROP PROCEDURE [PPL].[STG2_DIM_REQUEST_STATUS]

GO

USE [GL_TNB_DWH]
GO

/****** Object:  StoredProcedure [PPL].[STG2_FCT_CONTRACT_MONTHLY]    Script Date: 12/26/2016 9:26:50 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [PPL].[STG2_FCT_CONTRACT_MONTHLY]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_FCT_CONTRACT_MONTHLY
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND
 * Purpose					:  To replicate data from GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND to GL_TNB_DWH.FCT.DWH_TNB_FCT_CONTRACT_MONTHLY
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-09     Perasan.A			  Creation of this initialization script.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_FCT_CONTRACT_MONTHLY WITH GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND
 BEGIN

	MERGE GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY AS TARGET_TABLE
	USING	(
			 SELECT	 MSOL_YEAR AS DATA_YEAR
					,MSOL_MONTH AS DATA_MONTH
					,MSOL_DOC_NO AS DOC_NO
					,CONVERT(DATE,DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,CONVERT(DATE,'01/' + CONVERT(VARCHAR(2),MSOL_MONTH) + '/' + CONVERT(VARCHAR(4),MSOL_YEAR),103))+1,0))) AS DATA_DATE
					,MSOL_REC_STS AS REC_STATUS
					,MSOL_CHECK_DIGIT AS CHECK_DIGIT
					,MSOL_REPO_DATE AS REPO_DATE
					,MSOL_STATUS_FLAG AS ACCOUNT_STATUS_CODE
					,MSOL_CHANGE_STATUS_DATE AS CHANGE_STATUS_DATE
					,MSOL_GRADE AS BOT_CLASS_CODE
					,ISNULL(MSOL_OS_UID_PRINCIPAL,0) AS OS_UID_PRINCIPAL
					,ISNULL(MSOL_OS_BAL,0) AS OS_BAL
					,ISNULL(MSOL_OS_UID1_UNEARN,0) AS OS_UID1_UNEARN
					,ISNULL(MSOL_OS_UID1_SURPLUS,0) AS OS_UID1_SURPLUS
					,ISNULL(MSOL_OS_UID1_OTHER,0) AS OS_UID1_OTHER
					,ISNULL(MSOL_OS_UID1_AMOUNT,0) AS OS_UID1_AMOUNT
					,ISNULL(MSOL_UNEARN_OTHER,0) AS UNEARN_OTHER
					,ISNULL(MSOL_REALIZE_UNPAID_UNEARN,0) AS REALIZE_UNPAID_UNEARN
					,ISNULL(MSOL_REALIZE_UNPAID_SURPLUS,0) AS REALIZE_UNPAID_SURPLUS
					,ISNULL(MSOL_REALIZE_UNPAID_OTHER,0) AS REALIZE_UNPAID_OTHER
					,ISNULL(MSOL_REALIZED_UNPAID,0) AS REALIZED_UNPAID
					,ISNULL(MSOL_EOM_UNEARN,0) AS EOM_UNEARN
					,ISNULL(MSOL_EOM_SURPLUS,0) AS EOM_SURPLUS
					,ISNULL(MSOL_EOM_OTHER,0) AS EOM_OTHER
					,ISNULL(MSOL_ACCRUED_EOM,0) AS ACCRUED_EOM
					,ISNULL(MSOL_REVERSE_UNEARN,0) AS REVERSE_UNEARN
					,ISNULL(MSOL_REVERSE_SURPLUS,0) AS REVERSE_SURPLUS
					,ISNULL(MSOL_REVERSE_OTHER,0) AS REVERSE_OTHER
					,ISNULL(MSOL_REVERSE_UID_AMT,0) AS REVERSE_UID_AMT
					,JOB_RUN_KEY
					,SOURCE_SYSTEM_CODE
					,SOURCE_TABLE_NAME
					,DELETED_FLAG
					,SOURCE_LAST_UPDATE_DATE_TIME
					/* add 2 new columns for EX-COM project*/
					,ISNULL(MSOL_DUE_PERIOD,0) AS DUE_PERIOD
					,ISNULL(MSOL_INSTALL_PASS_DUE,0) AS INSTALL_PASS_DUE
					,ISNULL(MSOL_PAY_PRINCIPAL,0) AS PAY_PRINCIPAL
			 FROM	 GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT_MONTHEND
			 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.DATA_YEAR = SOURCE_TABLE.DATA_YEAR AND TARGET_TABLE.DATA_MONTH = SOURCE_TABLE.DATA_MONTH AND TARGET_TABLE.DOC_NO = SOURCE_TABLE.DOC_NO AND TARGET_TABLE.CHECK_DIGIT = SOURCE_TABLE.CHECK_DIGIT)
	WHEN MATCHED THEN
		UPDATE SET  DATA_YEAR = SOURCE_TABLE.DATA_YEAR,
					DATA_MONTH = SOURCE_TABLE.DATA_MONTH,
					DOC_NO = SOURCE_TABLE.DOC_NO,
					DATA_DATE = SOURCE_TABLE.DATA_DATE,
					REC_STATUS = SOURCE_TABLE.REC_STATUS,
					CHECK_DIGIT = SOURCE_TABLE.CHECK_DIGIT,
					REPO_DATE = SOURCE_TABLE.REPO_DATE,
					ACCOUNT_STATUS_CODE = SOURCE_TABLE.ACCOUNT_STATUS_CODE,
					CHANGE_STATUS_DATE = SOURCE_TABLE.CHANGE_STATUS_DATE,
					BOT_CLASS_CODE = SOURCE_TABLE.BOT_CLASS_CODE,
					OS_UID_PRINCIPAL = SOURCE_TABLE.OS_UID_PRINCIPAL,
					OS_BAL = SOURCE_TABLE.OS_BAL,
					OS_UID1_UNEARN = SOURCE_TABLE.OS_UID1_UNEARN,
					OS_UID1_SURPLUS = SOURCE_TABLE.OS_UID1_SURPLUS,
					OS_UID1_OTHER = SOURCE_TABLE.OS_UID1_OTHER,
					OS_UID1_AMOUNT = SOURCE_TABLE.OS_UID1_AMOUNT,
					UNEARN_OTHER = SOURCE_TABLE.UNEARN_OTHER,
					REALIZE_UNPAID_UNEARN = SOURCE_TABLE.REALIZE_UNPAID_UNEARN,
					REALIZE_UNPAID_SURPLUS = SOURCE_TABLE.REALIZE_UNPAID_SURPLUS,
					REALIZE_UNPAID_OTHER = SOURCE_TABLE.REALIZE_UNPAID_OTHER,
					REALIZED_UNPAID = SOURCE_TABLE.REALIZED_UNPAID,
					EOM_UNEARN = SOURCE_TABLE.EOM_UNEARN,
					EOM_SURPLUS = SOURCE_TABLE.EOM_SURPLUS,
					EOM_OTHER = SOURCE_TABLE.EOM_OTHER,
					ACCRUED_EOM = SOURCE_TABLE.ACCRUED_EOM,
					REVERSE_UNEARN = SOURCE_TABLE.REVERSE_UNEARN,
					REVERSE_SURPLUS = SOURCE_TABLE.REVERSE_SURPLUS,
					REVERSE_OTHER = SOURCE_TABLE.REVERSE_OTHER,
					REVERSE_UID_AMT = SOURCE_TABLE.REVERSE_UID_AMT,
					JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY,
					SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE,
					SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME,
					DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG,
					SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,
					/* add 2 new columns for EX-COM project*/
					DUE_PERIOD = SOURCE_TABLE.DUE_PERIOD,
					INSTALL_PASS_DUE = SOURCE_TABLE.INSTALL_PASS_DUE,
					PAY_PRINCIPAL = SOURCE_TABLE.PAY_PRINCIPAL,
					LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (
				 DATA_YEAR
				,DATA_MONTH
				,DOC_NO
				,DATA_DATE
				,REC_STATUS
				,CHECK_DIGIT
				,REPO_DATE
				,ACCOUNT_STATUS_CODE
				,CHANGE_STATUS_DATE
				,BOT_CLASS_CODE
				,OS_UID_PRINCIPAL
				,OS_BAL
				,OS_UID1_UNEARN
				,OS_UID1_SURPLUS
				,OS_UID1_OTHER
				,OS_UID1_AMOUNT
				,UNEARN_OTHER
				,REALIZE_UNPAID_UNEARN
				,REALIZE_UNPAID_SURPLUS
				,REALIZE_UNPAID_OTHER
				,REALIZED_UNPAID
				,EOM_UNEARN
				,EOM_SURPLUS
				,EOM_OTHER
				,ACCRUED_EOM
				,REVERSE_UNEARN
				,REVERSE_SURPLUS
				,REVERSE_OTHER
				,REVERSE_UID_AMT
				,JOB_RUN_KEY
				,SOURCE_SYSTEM_CODE
				,SOURCE_TABLE_NAME
				,DELETED_FLAG
				,SOURCE_LAST_UPDATE_DATE_TIME
				,LAST_UPDATE_DATE_TIME
				/* add 2 new columns for EX-COM project*/
				,DUE_PERIOD
				,INSTALL_PASS_DUE
				,PAY_PRINCIPAL
				)
		VALUES (
				 SOURCE_TABLE.DATA_YEAR
				,SOURCE_TABLE.DATA_MONTH
				,SOURCE_TABLE.DOC_NO
				,SOURCE_TABLE.DATA_DATE
				,SOURCE_TABLE.REC_STATUS
				,SOURCE_TABLE.CHECK_DIGIT
				,SOURCE_TABLE.REPO_DATE
				,SOURCE_TABLE.ACCOUNT_STATUS_CODE
				,SOURCE_TABLE.CHANGE_STATUS_DATE
				,SOURCE_TABLE.BOT_CLASS_CODE
				,SOURCE_TABLE.OS_UID_PRINCIPAL
				,SOURCE_TABLE.OS_BAL
				,SOURCE_TABLE.OS_UID1_UNEARN
				,SOURCE_TABLE.OS_UID1_SURPLUS
				,SOURCE_TABLE.OS_UID1_OTHER
				,SOURCE_TABLE.OS_UID1_AMOUNT
				,SOURCE_TABLE.UNEARN_OTHER
				,SOURCE_TABLE.REALIZE_UNPAID_UNEARN
				,SOURCE_TABLE.REALIZE_UNPAID_SURPLUS
				,SOURCE_TABLE.REALIZE_UNPAID_OTHER
				,SOURCE_TABLE.REALIZED_UNPAID
				,SOURCE_TABLE.EOM_UNEARN
				,SOURCE_TABLE.EOM_SURPLUS
				,SOURCE_TABLE.EOM_OTHER
				,SOURCE_TABLE.ACCRUED_EOM
				,SOURCE_TABLE.REVERSE_UNEARN
				,SOURCE_TABLE.REVERSE_SURPLUS
				,SOURCE_TABLE.REVERSE_OTHER
				,SOURCE_TABLE.REVERSE_UID_AMT
				,SOURCE_TABLE.JOB_RUN_KEY
				,SOURCE_TABLE.SOURCE_SYSTEM_CODE
				,SOURCE_TABLE.SOURCE_TABLE_NAME
				,SOURCE_TABLE.DELETED_FLAG
				,SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
				,GETDATE()
				/* add 2 new columns for EX-COM project*/
				,SOURCE_TABLE.DUE_PERIOD
				,SOURCE_TABLE.INSTALL_PASS_DUE
				,SOURCE_TABLE.PAY_PRINCIPAL
				)
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

  --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END


GO




USE [GL_TNB_DWH]
GO

/****** Object:  StoredProcedure [PPL].[STG2_FCT_APP_CONTRACT]    Script Date: 12/26/2016 9:20:40 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [PPL].[STG2_FCT_APP_CONTRACT]
(
 @TRN_JOB_RUN_KEY BIGINT
,@MST_JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_FCT_APP_CONTRACT
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION LEFT OUTER JOIN GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT ON MLMH_REQ_DOC = MLHP_REQ_DOC
 * Purpose					:  To replicate data from STG_TNB_TRN_APPLICATION,STG_TNB_TRN_CONTRACT to GL_TNB_DWH.FCT.DWH_TNB_FCT_APP_CONTRACT
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-08     Perasan.A			  Creation of this initialization script.
 *            2016-12-20     Suppakorn.C		  Creation of this initialization script.			
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @TRN_JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION WHERE JOB_RUN_KEY = @TRN_JOB_RUN_KEY

 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_FCT_APP_CONTRACT WITH GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION
 BEGIN
	MERGE GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT AS TARGET_TABLE
	USING	(
			 SELECT	 MLMH_REQ_DOC AS REQ_DOC,MLMH_DOC_NO AS DOC_NO
					,MLMH_CHECK_DIGIT AS CHECK_DIGIT		
					,MLMH_PROJECT_CODE AS PRODUCT_CODE
					,ISNULL(BRANCH_CODE,'T025') AS BRANCH_CODE
					,ISNULL(DEALER_CODE,-1) AS DEALER_CODE
					,ISNULL(MLMH_CUSTOMER_COME_FROM,-1) AS CUST_SOURCE_CODE
					,ISNULL(MLMH_REQUEST_STATUS,-1) AS REQUEST_STATUS
					,ISNULL(MLMH_REC_STS,'C') AS REC_STATUS
					,CASE
						WHEN (MLMH_REC_STS = 'C' OR MLMH_REC_STS IS NULL OR MLMH_REC_STS = '') AND (MLMH_REJECT_FLAG <> '1' AND MLMH_REJECT_FLAG <> '2') THEN '2'
						ELSE MLMH_REJECT_FLAG
					 END AS REJECT_FLAG
					,CASE 
						WHEN MLMH_REJECT_FLAG = '1' THEN 'Reject' 
						WHEN MLMH_REJECT_FLAG = '2' THEN 'Cancel' 
						WHEN (MLMH_REC_STS = 'C' OR MLMH_REC_STS IS NULL OR MLMH_REC_STS = '') AND (MLMH_REJECT_FLAG <> '1' AND MLMH_REJECT_FLAG <> '2') THEN 'Cancel' 
						ELSE 'Normal'
					 END AS REJECT_DESC
					,ISNULL(MLHP_BEG_INVENSTMENT_AMT,0) AS FINANCIAL_AMOUNT
					,ISNULL(MLHP_PAY_PERIOD_AMOUNT,0) AS INSTALLMENT_AMOUNT
					,ISNULL(MLHP_VAT_PAY_PERIOD,0) AS VAT_AMOUNT
					,ISNULL(MLHP_HIRING_CHARGE,0) AS INTEREST_AMOUNT
					,ISNULL(MLMH_PERIOD_INSTALL_PRINCIPAL,0) AS TOTAL_TERM
					,ISNULL(MLHP_FLAT_RATE_PER_MONTH,0) AS FLAT_RATE
					,ISNULL(MLHP_NET_EFFECTIVE_RATE,0) AS EFFECTIVE_RATE
					,MLMH_DOC_DATE AS DOC_DATE,MLMH_APPROVE_LOAN_DATE AS APPROVE_LOAN_DATE
					,MLMH_APPROVE_REQUEST_DATE AS APPROVE_REQUEST_DATE
					,MLMH_CANCEL_DATE AS CANCEL_DATE
					,CASE
						WHEN (MLMH_REQUEST_STATUS < '@m') AND (MLMH_REJECT_FLAG <> '1' AND MLMH_REJECT_FLAG <> '2') THEN CONVERT(DATE,MLMH_DOC_DATE)
						ELSE CONVERT(DATE,'01/01/1900',103)
					 END AS WAITING_DATE
					,CASE
						WHEN (MLMH_REQUEST_STATUS >= '@m') AND (MLMH_REJECT_FLAG <> '1' AND MLMH_REJECT_FLAG <> '2') AND (MLMH_STATUS_FLAG = '' OR MLMH_STATUS_FLAG IS NULL) THEN CONVERT(DATE,MLMH_DOC_DATE)
						ELSE CONVERT(DATE,'01/01/1900',103)
					 END AS PENDING_PAYMENT_DATE
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.JOB_RUN_KEY
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.SOURCE_SYSTEM_CODE
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.SOURCE_TABLE_NAME
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.DELETED_FLAG
					,GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.SOURCE_LAST_UPDATE_DATE_TIME
					,MLMH_START_PAY_PRINCIPAL_DATE AS FIRST_DUE_DATE
					,MLMH_LST_PAY_PERIOD_PRINCIPAL AS LAST_PAY_PERIOD
					,MLMH_REPO_DATE AS REPO_DATE
					,MLMH_NEXT_PAY_PRINCIPAL_DATE AS NEXT_DUE_DATE
			 FROM	 GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION LEFT OUTER JOIN 
					 (
					  SELECT *
							,CASE
								WHEN (MLHP_DEALER_CODE IS NULL) OR (MLHP_DEALER_CODE = '') THEN MLHP_FROM_SHOWROOM
								ELSE MLHP_DEALER_CODE
							 END AS MLHP_DEALER_CODE_2
					  FROM	 GL_TNB_STG.STG.STG_TNB_TRN_CONTRACT
					 ) AS STG_TNB_TRN_CONTRACT_TMP
					 ON MLMH_REQ_DOC = MLHP_REQ_DOC AND GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.JOB_RUN_KEY = STG_TNB_TRN_CONTRACT_TMP.JOB_RUN_KEY LEFT OUTER JOIN
					(
					 SELECT MDLR_DEALER_CODE AS BRANCH_CODE
					 FROM	GL_TNB_STG.STG.STG_TNB_MST_BRANCH
					 WHERE	JOB_RUN_KEY = @MST_JOB_RUN_KEY
					) AS BRANCH ON MLHP_DEALER_CODE = BRANCH_CODE LEFT OUTER JOIN 
					(
					 SELECT MDLR_DEALER_CODE AS DEALER_CODE
					 FROM	GL_TNB_STG.STG.STG_TNB_MST_DEALER
					 WHERE	JOB_RUN_KEY = @MST_JOB_RUN_KEY
					) AS DEALER ON MLHP_DEALER_CODE_2 = DEALER_CODE 
			 WHERE	 GL_TNB_STG.STG.STG_TNB_TRN_APPLICATION.JOB_RUN_KEY = @TRN_JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.REQ_DOC = SOURCE_TABLE.REQ_DOC)
	WHEN MATCHED THEN
		UPDATE SET   DOC_NO = SOURCE_TABLE.DOC_NO,
					 CHECK_DIGIT = SOURCE_TABLE.CHECK_DIGIT,
					 PRODUCT_CODE = SOURCE_TABLE.PRODUCT_CODE,
					 BRANCH_CODE = SOURCE_TABLE.BRANCH_CODE,
					 DEALER_CODE = SOURCE_TABLE.DEALER_CODE,
					 CUST_SOURCE_CODE = SOURCE_TABLE.CUST_SOURCE_CODE,
					 REQUEST_STATUS = SOURCE_TABLE.REQUEST_STATUS,
					 REC_STATUS = SOURCE_TABLE.REC_STATUS,
					 REJECT_FLAG = SOURCE_TABLE.REJECT_FLAG,
					 REJECT_DESC = SOURCE_TABLE.REJECT_DESC,
					 FINANCIAL_AMOUNT = SOURCE_TABLE.FINANCIAL_AMOUNT,
					 INSTALLMENT_AMOUNT = SOURCE_TABLE.INSTALLMENT_AMOUNT,
					 VAT_AMOUNT = SOURCE_TABLE.VAT_AMOUNT,
					 INTEREST_AMOUNT = SOURCE_TABLE.INTEREST_AMOUNT,
					 TOTAL_TERM = SOURCE_TABLE.TOTAL_TERM,
					 FLAT_RATE = SOURCE_TABLE.FLAT_RATE,
					 EFFECTIVE_RATE = SOURCE_TABLE.EFFECTIVE_RATE,
					 DOC_DATE = SOURCE_TABLE.DOC_DATE,
					 APPROVE_LOAN_DATE = SOURCE_TABLE.APPROVE_LOAN_DATE,
					 APPROVE_REQUEST_DATE = SOURCE_TABLE.APPROVE_REQUEST_DATE,
					 CANCEL_DATE = SOURCE_TABLE.CANCEL_DATE,
					 JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY,
					 SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE,
					 SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME,
					 DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG,
					 SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,
					 LAST_UPDATE_DATE_TIME = GETDATE(),
					 FIRST_DUE_DATE = SOURCE_TABLE.FIRST_DUE_DATE,
					 LAST_PAY_PERIOD = SOURCE_TABLE.LAST_PAY_PERIOD,
					 REPO_DATE = SOURCE_TABLE.REPO_DATE,
					 NEXT_DUE_DATE = SOURCE_TABLE.NEXT_DUE_DATE
	WHEN NOT MATCHED THEN
		INSERT (
				 REQ_DOC
				,DOC_NO
				,CHECK_DIGIT
				,PRODUCT_CODE
				,BRANCH_CODE
				,DEALER_CODE
				,CUST_SOURCE_CODE
				,REQUEST_STATUS
				,REC_STATUS
				,REJECT_FLAG
				,REJECT_DESC
				,FINANCIAL_AMOUNT
				,INSTALLMENT_AMOUNT
				,VAT_AMOUNT
				,INTEREST_AMOUNT
				,TOTAL_TERM
				,FLAT_RATE
				,EFFECTIVE_RATE
				,DOC_DATE
				,APPROVE_LOAN_DATE
				,APPROVE_REQUEST_DATE
				,CANCEL_DATE
				,WAITING_DATE
				,PENDING_PAYMENT_DATE
				,JOB_RUN_KEY
				,SOURCE_SYSTEM_CODE
				,SOURCE_TABLE_NAME
				,DELETED_FLAG
				,SOURCE_LAST_UPDATE_DATE_TIME
				,LAST_UPDATE_DATE_TIME
				,FIRST_DUE_DATE
				,LAST_PAY_PERIOD
				,REPO_DATE
				,NEXT_DUE_DATE
				)
		VALUES (
				 SOURCE_TABLE.REQ_DOC
				,SOURCE_TABLE.DOC_NO
				,SOURCE_TABLE.CHECK_DIGIT
				,SOURCE_TABLE.PRODUCT_CODE
				,SOURCE_TABLE.BRANCH_CODE
				,SOURCE_TABLE.DEALER_CODE
				,SOURCE_TABLE.CUST_SOURCE_CODE
				,SOURCE_TABLE.REQUEST_STATUS
				,SOURCE_TABLE.REC_STATUS
				,SOURCE_TABLE.REJECT_FLAG
				,SOURCE_TABLE.REJECT_DESC
				,SOURCE_TABLE.FINANCIAL_AMOUNT
				,SOURCE_TABLE.INSTALLMENT_AMOUNT
				,SOURCE_TABLE.VAT_AMOUNT
				,SOURCE_TABLE.INTEREST_AMOUNT
				,SOURCE_TABLE.TOTAL_TERM
				,SOURCE_TABLE.FLAT_RATE
				,SOURCE_TABLE.EFFECTIVE_RATE
				,SOURCE_TABLE.DOC_DATE
				,SOURCE_TABLE.APPROVE_LOAN_DATE
				,SOURCE_TABLE.APPROVE_REQUEST_DATE
				,SOURCE_TABLE.CANCEL_DATE
				,SOURCE_TABLE.WAITING_DATE
				,SOURCE_TABLE.PENDING_PAYMENT_DATE
				,SOURCE_TABLE.JOB_RUN_KEY
				,SOURCE_TABLE.SOURCE_SYSTEM_CODE
				,SOURCE_TABLE.SOURCE_TABLE_NAME
				,SOURCE_TABLE.DELETED_FLAG
				,SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
				,GETDATE()
				,SOURCE_TABLE.FIRST_DUE_DATE
				,SOURCE_TABLE.LAST_PAY_PERIOD
				,SOURCE_TABLE.REPO_DATE
				,SOURCE_TABLE.NEXT_DUE_DATE
				)

	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

 --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT WHERE JOB_RUN_KEY = @TRN_JOB_RUN_KEY

 ----STEP 4 DELETE GABAGE (SB JAN 2015)
 --BEGIN
	--DELETE GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT WHERE DOC_NO = 581208005300
 --END

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END

GO




USE [GL_TNB_DWH]
GO

/****** Object:  StoredProcedure [PPL].[STG2_DIM_REQUEST_STATUS]    Script Date: 12/26/2016 9:16:01 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [PPL].[STG2_DIM_REQUEST_STATUS]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_REQUEST_STATUS
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS
 * Purpose					:  To replicate data from GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS to GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-06     Perasan.A			  Creation of this initialization script.
 *            2016-12-01     Suppakorn.C		  Add REQ_STATUS_GRP_CODE and REQ_STATUS_GRP_DESC scripts.
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 DECLARE @MergeOutput table
 (
  ActionType nvarchar(10)
 )

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS WHERE JOB_RUN_KEY = @JOB_RUN_KEY


 --STEP 2 MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS WITH GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS
 BEGIN
	MERGE GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS AS TARGET_TABLE
	USING	(
			SELECT	 MDSC_COD,MDSC_DSC
					,CASE 
						WHEN MDSC_COD >='@a' AND MDSC_COD <= '@d' THEN 'S2'
						WHEN MDSC_COD > '@d' AND MDSC_COD <= '@i' THEN 'S3'
						WHEN MDSC_COD > '@i' AND MDSC_COD <= '@m' THEN 'S4'
						WHEN MDSC_COD > '@m' AND MDSC_COD <= 'T' THEN 'S5'
						WHEN MDSC_COD > 'T' AND MDSC_COD <= 'W' THEN 'S6'
					 END AS REQ_STATUS_GRP_CODE
					,CASE 
						WHEN MDSC_COD >='@a' AND MDSC_COD <= '@d' THEN 'Credit 1'
						WHEN MDSC_COD > '@d' AND MDSC_COD <= '@i' THEN 'Credit 2'
						WHEN MDSC_COD > '@i' AND MDSC_COD <= '@m' THEN 'Control'
						WHEN MDSC_COD > '@m' AND MDSC_COD <= 'T' THEN 'Documentation'
						WHEN MDSC_COD > 'T' AND MDSC_COD <= 'W' THEN 'Payment'
					 END AS REQ_STATUS_GRP_DESC   
					,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME
			 FROM	 GL_TNB_STG.STG.STG_TNB_MST_REQUEST_STATUS 
			 WHERE	 JOB_RUN_KEY = @JOB_RUN_KEY
			) AS SOURCE_TABLE
	ON (TARGET_TABLE.REQUEST_STATUS_CODE = SOURCE_TABLE.MDSC_COD)
	WHEN MATCHED THEN
		UPDATE SET   REQUEST_STATUS_DESC = SOURCE_TABLE.MDSC_DSC
					,REQ_STATUS_GRP_CODE = SOURCE_TABLE.REQ_STATUS_GRP_CODE
					,REQ_STATUS_GRP_DESC = SOURCE_TABLE.REQ_STATUS_GRP_DESC
					,JOB_RUN_KEY = SOURCE_TABLE.JOB_RUN_KEY
					,SOURCE_SYSTEM_CODE = SOURCE_TABLE.SOURCE_SYSTEM_CODE
					,SOURCE_TABLE_NAME = SOURCE_TABLE.SOURCE_TABLE_NAME
					,DELETED_FLAG = SOURCE_TABLE.DELETED_FLAG
					,SOURCE_LAST_UPDATE_DATE_TIME = SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME
					,LAST_UPDATE_DATE_TIME = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (REQUEST_STATUS_CODE,REQUEST_STATUS_DESC,REQ_STATUS_GRP_CODE,REQ_STATUS_GRP_DESC,JOB_RUN_KEY,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME)
		VALUES (SOURCE_TABLE.MDSC_COD,SOURCE_TABLE.MDSC_DSC,SOURCE_TABLE.REQ_STATUS_GRP_CODE,SOURCE_TABLE.REQ_STATUS_GRP_DESC,SOURCE_TABLE.JOB_RUN_KEY,SOURCE_TABLE.SOURCE_SYSTEM_CODE,SOURCE_TABLE.SOURCE_TABLE_NAME,SOURCE_TABLE.DELETED_FLAG,'',SOURCE_TABLE.SOURCE_LAST_UPDATE_DATE_TIME,GETDATE())
	OUTPUT $action INTO @MergeOutput;
 END

 --COUNT UPDATED ROWS
 SELECT @UPD_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'UPDATE'

 --COUNT INSERT ROWS
 SELECT @INS_CNT = COUNT(*) FROM @MergeOutput WHERE ActionType = 'INSERT'

  --STEP 3 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END






GO




USE [GL_TNB_DWH]
GO
/****** Object:  StoredProcedure [PPL].[STG2_DIM_BRANCH]    Script Date: 3/17/2017 10:47:18 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [PPL].[STG2_DIM_BRANCH]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_BRANCH
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_BRANCH
 * Purpose					:  To replicate data from STG_TNB_MST_BRANCH to DWH_TNB_DIM_BRANCH (SCD TYPE 2)
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-07     Perasan.A			  Creation of this initialization script.
 *            2016-12-07     Jirapong.C           Update SP to support EX-COM project
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0
 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_BRANCH WHERE JOB_RUN_KEY = @JOB_RUN_KEY
 
 --STEP 2 DECLARE VARIABLE FOR LOAD DATA
 DECLARE @STG_BRANCH_CODE VARCHAR(10)
 DECLARE @STG_BRANCH_REGION VARCHAR(60)
 DECLARE @STG_BRANCH_NAME_THAI VARCHAR(60)
 DECLARE @STG_BRANCH_NAME_ENGLISH VARCHAR(60)
 DECLARE @STG_BRANCH_SHORT_NAME VARCHAR(3)
 DECLARE @STG_BRANCH_ORDER VARCHAR(5)
 DECLARE @STG_SOURCE_SYSTEM_CODE VARCHAR(10)
 DECLARE @STG_SOURCE_TABLE_NAME VARCHAR(20)
 DECLARE @STG_DELETED_FLAG VARCHAR(1)
 DECLARE @STG_BRANCH_CREATE_DATE DATETIME
 DECLARE @STG_TAKE_CARE_BY_BRANCH_CODE INT
-- DECLARE @STG_BRANCH_CLOSE_DATE DATETIME
 DECLARE @STG_BRANCH_ACTIVE_STATUS VARCHAR(1)
 --DECLARE @STG_COMMENTS VARCHAR(500)
 DECLARE @STG_SOURCE_LAST_UPDATE_DATE_TIME DATETIME
 DECLARE @DWH_SK_BRANCH_KEY BIGINT
 DECLARE @DWH_BRANCH_REGION VARCHAR(60)
 DECLARE MST_BRANCH_Cursor CURSOR FOR

 --STEP 3 PREPARE DATA FROM STAGING TABLE
 SELECT
 	a.MDLR_DEALER_CODE AS BRANCH_CODE
 	,ISNULL(b.BRANCH_ZONE_NAME,'') AS BRANCH_REGION
 	,ISNULL(ISNULL(b.BRANCH_NAME_THAI,a.MDLR_DEALER_NAME_THAI),'') AS BRANCH_NAME_THAI
 	,ISNULL(ISNULL(b.BRANCH_NAME_ENG,a.MDLR_DEALER_NAME_ENGLISH),'') AS BRANCH_NAME_ENGLISH
 	,ISNULL(b.BRANCH_SHORT_NAME,'') AS BRANCH_SHORT_NAME
 	,ISNULL(b.BRANCH_ORDER,'99999') AS BRANCH_ORDER
 	,a.SOURCE_SYSTEM_CODE
 	,a.SOURCE_TABLE_NAME
 	,a.DELETED_FLAG
 	,a.SOURCE_LAST_UPDATE_DATE_TIME
 	,CASE WHEN ISNULL(d.DOC_DATE,'9999-12-31') < ISNULL(c.MBRN_MTN_DATE_TIME,'9999-12-31') AND ISNULL(d.DOC_DATE,'9999-12-31') < ISNULL(e.BRANCH_CREATE_DATE,'9999-12-31') THEN d.DOC_DATE
 		  WHEN ISNULL(c.MBRN_MTN_DATE_TIME,'9999-12-31') < ISNULL(e.BRANCH_CREATE_DATE,'9999-12-31') AND ISNULL(c.MBRN_MTN_DATE_TIME,'9999-12-31') < ISNULL(d.DOC_DATE,'9999-12-31') THEN c.MBRN_MTN_DATE_TIME
 		  ELSE ISNULL(e.BRANCH_CREATE_DATE,'9999-12-31')
 	END AS BRANCH_CREATE_DATE
 	,a.MDLR_TAKE_CARE_BY_BRANCH_CODE AS TAKE_CARE_BY_BRANCH_CODE
	,CASE WHEN c.MBRN_STATUS IS NOT NULL AND c.MBRN_STATUS <> 'A' THEN 'I'
		  WHEN c.MBRN_STATUS IS NULL OR c.MBRN_STATUS = 'A' THEN 'A'
	END AS BRANCH_ACTIVE_STATUS
/*	,CASE WHEN c.MBRN_STATUS IS NOT NULL AND c.MBRN_STATUS <> 'A' AND e.BRANCH_CLOSE_DATE IS NULL THEN c.MBRN_MTN_DATE_TIME
		  WHEN c.MBRN_STATUS IS NOT NULL AND c.MBRN_STATUS <> 'A' AND e.BRANCH_CLOSE_DATE IS NOT NULL THEN e.BRANCH_CLOSE_DATE
		  WHEN c.MBRN_STATUS IS NULL OR c.MBRN_STATUS = 'A' THEN NULL
	END	AS BRANCH_CLOSE_DATE   */
 FROM GL_TNB_STG.STG.STG_TNB_MST_BRANCH a
 LEFT OUTER JOIN GL_TNB_STG.LKP.LKP_TNB_MST_BRANCH b
 ON a.MDLR_DEALER_CODE = b.BRANCH_CODE
 LEFT OUTER JOIN
 	( 
 	SELECT 
 		BRANCH_CODE
 		,MIN(DOC_DATE) AS DOC_DATE
 	FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT
 	WHERE BRANCH_CODE LIKE 'T%'
 	GROUP BY BRANCH_CODE
 	) d
 ON a.MDLR_DEALER_CODE = d.BRANCH_CODE
 LEFT OUTER JOIN GL_TNB_STG.STG.STG_TNB_MST_BRANCH_FILE c
 ON a.MDLR_TAKE_CARE_BY_BRANCH_CODE = c.MBRN_CODE AND c.JOB_RUN_KEY = @JOB_RUN_KEY
 LEFT OUTER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH e
 ON a.MDLR_DEALER_CODE = e.BRANCH_CODE AND e.IS_ACTIVE = 'Y'
 WHERE a.JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 4 FETCH STAGING VALUE INTO VARIABLE
 OPEN MST_BRANCH_Cursor
 FETCH NEXT FROM MST_BRANCH_Cursor INTO @STG_BRANCH_CODE,@STG_BRANCH_REGION,@STG_BRANCH_NAME_THAI,@STG_BRANCH_NAME_ENGLISH,@STG_BRANCH_SHORT_NAME
									   ,@STG_BRANCH_ORDER,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME
									   ,@STG_DELETED_FLAG,@STG_SOURCE_LAST_UPDATE_DATE_TIME,@STG_BRANCH_CREATE_DATE,@STG_TAKE_CARE_BY_BRANCH_CODE
									   ,@STG_BRANCH_ACTIVE_STATUS
									   /* ,@STG_BRANCH_CLOSE_DATE */
 WHILE @@FETCH_STATUS = 0
 BEGIN

	 --STEP 5 GET MAX SURROGATE KEY FROM BUSINESS KEY (REFER TO DETAILS DESIGN DOCUMENT)
	 SELECT @DWH_SK_BRANCH_KEY = ISNULL(MAX(SK_BRANCH_KEY),0)
	 FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
	 WHERE	BRANCH_CODE = @STG_BRANCH_CODE

	 --STEP 6 CHECK RECORD EXIST FROM MAX SURROGATE KEY
	 IF @DWH_SK_BRANCH_KEY = 0 
		 BEGIN
			--STEP 7 INSERT NEW RECORD OF DIMENSION TO TARGET
			INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH (BRANCH_CODE,BRANCH_REGION,BRANCH_NAME_THAI,BRANCH_NAME_ENGLISH,BRANCH_SHORT_NAME
										   ,BRANCH_ORDER,IS_ACTIVE,VALID_FROM,VALID_TO,JOB_RUN_KEY
										   ,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS
										   ,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME,BRANCH_CREATE_DATE,TAKE_CARE_BY_BRANCH_CODE
										   ,BRANCH_ACTIVE_STATUS /* ,BRANCH_CLOSE_DATE  */ ) 
						            VALUES (@STG_BRANCH_CODE,@STG_BRANCH_REGION,@STG_BRANCH_NAME_THAI,@STG_BRANCH_NAME_ENGLISH,@STG_BRANCH_SHORT_NAME
								           ,@STG_BRANCH_ORDER,'Y',CONVERT(DATE,'01/01/1900',103),CONVERT(DATE,'31/12/9999',103),@JOB_RUN_KEY
										   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME,@STG_DELETED_FLAG,''
										   ,@STG_SOURCE_LAST_UPDATE_DATE_TIME,GETDATE(),@STG_BRANCH_CREATE_DATE,@STG_TAKE_CARE_BY_BRANCH_CODE
										   ,@STG_BRANCH_ACTIVE_STATUS /* ,@STG_BRANCH_CLOSE_DATE */ )

			SET @INS_CNT = @INS_CNT + 1
		 END
	 ELSE
		 BEGIN
			--STEP 8 SELECT FIELD FOR DETECT CHANGE (REFER TO DETAILS DESIGN DOCUMENT)
			SELECT	@DWH_BRANCH_REGION = BRANCH_REGION
			FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
			WHERE	SK_BRANCH_KEY = @DWH_SK_BRANCH_KEY

			--STEP 9 DETECT CHANGE COLUMNS (REFER TO DETAILS DESIGN DOCUMENT)
			IF (@STG_BRANCH_REGION <> @DWH_BRANCH_REGION) AND (@STG_BRANCH_REGION <> '') AND (@DWH_BRANCH_REGION <> '')
				BEGIN
					--STEP 10 UPDATE OLD RECORD STATUS OF DIMENSION TO INACTIVE AND VALID_TO
					UPDATE	GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
					SET		IS_ACTIVE = 'N',VALID_TO = CONVERT(DATE,CONVERT(VARCHAR(10),DATEADD(DAY,-1,GETDATE()),103),103)
					WHERE	SK_BRANCH_KEY = @DWH_SK_BRANCH_KEY

					--STEP 11 INSERT CHANGE RECORD OF DIMENSION TO TARGET TABLE ***VALID FROM
					INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH (BRANCH_CODE,BRANCH_REGION,BRANCH_NAME_THAI,BRANCH_NAME_ENGLISH,BRANCH_SHORT_NAME
												   ,BRANCH_ORDER,IS_ACTIVE,VALID_FROM,VALID_TO,JOB_RUN_KEY
												   ,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS
												   ,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME,BRANCH_CREATE_DATE,TAKE_CARE_BY_BRANCH_CODE
												   ,BRANCH_ACTIVE_STATUS /* ,BRANCH_CLOSE_DATE */ ) 
											VALUES (@STG_BRANCH_CODE,@STG_BRANCH_REGION,@STG_BRANCH_NAME_THAI,@STG_BRANCH_NAME_ENGLISH,@STG_BRANCH_SHORT_NAME
												   ,@STG_BRANCH_ORDER,'Y',CONVERT(DATE,CONVERT(VARCHAR(10),GETDATE(),103),103),CONVERT(DATE,'31/12/9999',103),@JOB_RUN_KEY
												   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME,@STG_DELETED_FLAG,''
												   ,@STG_SOURCE_LAST_UPDATE_DATE_TIME,GETDATE(),@STG_BRANCH_CREATE_DATE,@STG_TAKE_CARE_BY_BRANCH_CODE
												   ,@STG_BRANCH_ACTIVE_STATUS /* ,@STG_BRANCH_CLOSE_DATE */)

					SET @INS_CNT = @INS_CNT + 1
				END
			ELSE
				--STEP 12 IF THERE IS FILE MAPPING TO MAINTAIN CHECK NEW VALUE FROM MAINTAINANCE FILE
				IF (@DWH_BRANCH_REGION = '') AND (@STG_BRANCH_REGION <> '')
					BEGIN
						--STEP 13 UPDATE OLD RECORD VALUE WITH THE NEW VALUE (UPDATE DETECT CHANGE FIELD WITH THE NEW ONE THAT IS NOT NULL)
						UPDATE	 GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
						SET		 BRANCH_REGION = @STG_BRANCH_REGION
								,BRANCH_NAME_THAI = @STG_BRANCH_NAME_THAI,BRANCH_NAME_ENGLISH = @STG_BRANCH_NAME_ENGLISH
								,BRANCH_SHORT_NAME = @STG_BRANCH_SHORT_NAME
								,BRANCH_ORDER = @STG_BRANCH_ORDER,JOB_RUN_KEY = @JOB_RUN_KEY
								,SOURCE_SYSTEM_CODE = @STG_SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME = @STG_SOURCE_TABLE_NAME
								,DELETED_FLAG = @STG_DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME = @STG_SOURCE_LAST_UPDATE_DATE_TIME
								,LAST_UPDATE_DATE_TIME = GETDATE()
								,BRANCH_CREATE_DATE = @STG_BRANCH_CREATE_DATE
								,TAKE_CARE_BY_BRANCH_CODE = @STG_TAKE_CARE_BY_BRANCH_CODE
								,BRANCH_ACTIVE_STATUS = @STG_BRANCH_ACTIVE_STATUS
							/*	,BRANCH_CLOSE_DATE = @STG_BRANCH_CLOSE_DATE	*/
						WHERE	 SK_BRANCH_KEY = @DWH_SK_BRANCH_KEY
						
						SET @UPD_CNT = @UPD_CNT + 1
					END
				ELSE
					BEGIN
						--STEP 14 UPDATE OLD RECORD VALUE WITH THE NEW VALUE
						UPDATE	 GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH
						SET		 BRANCH_NAME_THAI = @STG_BRANCH_NAME_THAI,BRANCH_NAME_ENGLISH = @STG_BRANCH_NAME_ENGLISH
								,BRANCH_SHORT_NAME = @STG_BRANCH_SHORT_NAME
								,BRANCH_ORDER = @STG_BRANCH_ORDER,JOB_RUN_KEY = @JOB_RUN_KEY
								,SOURCE_SYSTEM_CODE = @STG_SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME = @STG_SOURCE_TABLE_NAME
								,DELETED_FLAG = @STG_DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME = @STG_SOURCE_LAST_UPDATE_DATE_TIME
								,LAST_UPDATE_DATE_TIME = GETDATE()
								,BRANCH_CREATE_DATE = @STG_BRANCH_CREATE_DATE
								,TAKE_CARE_BY_BRANCH_CODE = @STG_TAKE_CARE_BY_BRANCH_CODE
								,BRANCH_ACTIVE_STATUS = @STG_BRANCH_ACTIVE_STATUS
							/*	,BRANCH_CLOSE_DATE = @STG_BRANCH_CLOSE_DATE */
						WHERE	 SK_BRANCH_KEY = @DWH_SK_BRANCH_KEY

						SET @UPD_CNT = @UPD_CNT + 1
					END
		 END

	 --STEP 15 FETCH STAGING VALUE INTO VARIABLE
	 FETCH NEXT FROM MST_BRANCH_Cursor INTO @STG_BRANCH_CODE,@STG_BRANCH_REGION,@STG_BRANCH_NAME_THAI,@STG_BRANCH_NAME_ENGLISH,@STG_BRANCH_SHORT_NAME
										   ,@STG_BRANCH_ORDER,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME
										   ,@STG_DELETED_FLAG,@STG_SOURCE_LAST_UPDATE_DATE_TIME,@STG_BRANCH_CREATE_DATE,@STG_TAKE_CARE_BY_BRANCH_CODE
										   ,@STG_BRANCH_ACTIVE_STATUS /* ,@STG_BRANCH_CLOSE_DATE */
 END

 --STEP 16 CLOSE CURSOR
 CLOSE MST_BRANCH_Cursor   
 DEALLOCATE MST_BRANCH_Cursor

 --STEP 17 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END



USE [GL_TNB_DWH]
GO

/****** Object:  StoredProcedure [PPL].[STG2_DIM_DEALER]    Script Date: 12/26/2016 9:15:04 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [PPL].[STG2_DIM_DEALER]
(
 @JOB_RUN_KEY BIGINT
)
AS
BEGIN
/* Stored Procedure Name	:  PPL.STG2_DIM_DEALER
 * Source Tables			:  GL_TNB_STG.STG.STG_TNB_MST_DEALER
 * Purpose					:  To replicate data from STG_TNB_MST_DEALER to DWH_TNB_DIM_DEALER (SCD TYPE 2)
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-08     Perasan.A			  Creation of this initialization script.
 *            2016-12-07     Jirapong.C           Update SP to support EX-COM project
 */
 DECLARE @STG_CNT BIGINT
 DECLARE @DWH_CNT BIGINT
 DECLARE @UPD_CNT BIGINT
 DECLARE @INS_CNT BIGINT
 DECLARE @DUM_CNT BIGINT

 SET @STG_CNT = 0
 SET @DWH_CNT = 0
 SET @UPD_CNT = 0
 SET @INS_CNT = 0
 SET @DUM_CNT = 0

 --@JOB_RUN_KEY IS NULL NO DATA FROM STAGING TABLE
 IF @JOB_RUN_KEY = 0
 BEGIN
	GOTO RETURN_POINT
 END

 --STEP 1 COUNT NUMBER OF ROW FROM STAGING TABLE
 SELECT @STG_CNT = COUNT(*) FROM GL_TNB_STG.STG.STG_TNB_MST_DEALER WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 2 DECLARE VARIABLE FOR LOAD DATA
 DECLARE @STG_DEALER_CODE VARCHAR(10)
 DECLARE @STG_DEALER_GROUP VARCHAR(60)
 DECLARE @STG_DEALER_GROUP_ID VARCHAR(5)
 DECLARE @STG_DEALER_NAME_THAI VARCHAR(60)
 DECLARE @STG_DEALER_NAME_ENGLISH VARCHAR(60)
 DECLARE @STG_SOURCE_SYSTEM_CODE VARCHAR(10)
 DECLARE @STG_SOURCE_TABLE_NAME VARCHAR(20)
 DECLARE @STG_DELETED_FLAG VARCHAR(1)
 --NEW VARIABLES FOR EX-COM PROJECT
 DECLARE @STG_DEALER_JOIN_DATE DATETIME
 DECLARE @STG_DEALER_QUIT_DATE DATETIME
 DECLARE @STG_DEALER_ACTIVE_STATUS VARCHAR(1)
 --DECLARE @STG_COMMENTS VARCHAR(500)
 DECLARE @STG_SOURCE_LAST_UPDATE_DATE_TIME DATETIME
 DECLARE @DWH_SK_DEALER_KEY BIGINT
 DECLARE @DWH_DEALER_GROUP VARCHAR(60)
 DECLARE @DWH_DEALER_GROUP_ID VARCHAR(5)
 DECLARE MST_DEALER_Cursor CURSOR FOR

 --STEP 3 PREPARE DATA FROM STAGING TABLE
 SELECT
	MDLR_DEALER_CODE AS DEALER_CODE
	,ISNULL(b.DEALER_GROUP_NAME,'') AS DEALER_GROUP
	,ISNULL(b.DEALER_GROUP_ID,'') AS DEALER_GROUP_ID
	,ISNULL(ISNULL(b.DEALER_NAME_THAI,MDLR_DEALER_NAME_THAI),'') AS DEALER_NAME_THAI
	,ISNULL(ISNULL(b.DEALER_NAME_ENG,MDLR_DEALER_NAME_ENGLISH),'') AS DEALER_NAME_ENGLISH
	,a.SOURCE_SYSTEM_CODE,a.SOURCE_TABLE_NAME,a.DELETED_FLAG,a.SOURCE_LAST_UPDATE_DATE_TIME
    ,CASE WHEN ISNULL(c.DOC_DATE,'9999-12-31') <= ISNULL(a.SOURCE_LAST_UPDATE_DATE_TIME,'9999-12-31') AND ISNULL(c.DOC_DATE,'9999-12-31') <= ISNULL(d.DEALER_JOIN_DATE,'9999-12-31') THEN c.DOC_DATE
          WHEN ISNULL(a.SOURCE_LAST_UPDATE_DATE_TIME,'9999-12-31') <= ISNULL(c.DOC_DATE,'9999-12-31') AND ISNULL(a.SOURCE_LAST_UPDATE_DATE_TIME,'9999-12-31') <= ISNULL(d.DEALER_JOIN_DATE,'9999-12-31') THEN a.SOURCE_LAST_UPDATE_DATE_TIME
		  WHEN ISNULL(d.DEALER_JOIN_DATE,'9999-12-31') <= ISNULL(c.DOC_DATE,'9999-12-31') AND ISNULL(d.DEALER_JOIN_DATE,'9999-12-31') <= ISNULL(a.SOURCE_LAST_UPDATE_DATE_TIME,'9999-12-31') THEN d.DEALER_JOIN_DATE
     END AS DEALER_JOIN_DATE
    ,CASE WHEN a.MDLR_STATUS IS NOT NULL AND a.MDLR_STATUS <> 'A' AND d.DEALER_QUIT_DATE IS NULL THEN a.SOURCE_LAST_UPDATE_DATE_TIME
		  WHEN a.MDLR_STATUS IS NOT NULL AND a.MDLR_STATUS <> 'A' AND d.DEALER_QUIT_DATE IS NOT NULL THEN d.DEALER_QUIT_DATE
		  WHEN a.MDLR_STATUS IS NULL OR a.MDLR_STATUS = 'A' THEN NULL
	END AS DEALER_QUIT_DATE
	,CASE WHEN a.MDLR_STATUS IS NOT NULL AND a.MDLR_STATUS <> 'A' THEN 'I'
		  WHEN a.MDLR_STATUS IS NULL OR a.MDLR_STATUS = 'A' THEN 'A'
	END AS DEALER_ACTIVE_STATUS
 FROM GL_TNB_STG.STG.STG_TNB_MST_DEALER a
 LEFT OUTER JOIN GL_TNB_STG.LKP.LKP_TNB_MST_DEALER b
 ON a.MDLR_DEALER_CODE = b.DEALER_CODE
 LEFT OUTER JOIN
 	( 
 	SELECT 
 		DEALER_CODE
 		,MIN(DOC_DATE) AS DOC_DATE
 	FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT
 	WHERE DEALER_CODE <> '-1'
 	GROUP BY DEALER_CODE
 	) c
 ON a.MDLR_DEALER_CODE = c.DEALER_CODE
 LEFT OUTER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER d
 ON a.MDLR_DEALER_CODE = d.DEALER_CODE AND d.IS_ACTIVE = 'Y'
 WHERE a.JOB_RUN_KEY = @JOB_RUN_KEY


 --STEP 4 FETCH STAGING VALUE INTO VARIABLE
 OPEN MST_DEALER_Cursor
 FETCH NEXT FROM MST_DEALER_Cursor INTO @STG_DEALER_CODE,@STG_DEALER_GROUP,@STG_DEALER_GROUP_ID,@STG_DEALER_NAME_THAI,@STG_DEALER_NAME_ENGLISH
									   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME
									   ,@STG_DELETED_FLAG,@STG_SOURCE_LAST_UPDATE_DATE_TIME,@STG_DEALER_JOIN_DATE
									   ,@STG_DEALER_QUIT_DATE,@STG_DEALER_ACTIVE_STATUS
 WHILE @@FETCH_STATUS = 0
 BEGIN
	 --STEP 5 GET MAX SURROGATE KEY FROM BUSINESS KEY (REFER TO DETAILS DESIGN DOCUMENT)
	 SELECT @DWH_SK_DEALER_KEY = ISNULL(MAX(SK_DEALER_KEY),0)
	 FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
	 WHERE	DEALER_CODE = @STG_DEALER_CODE



	 --STEP 6 CHECK RECORD EXIST FROM MAX SURROGATE KEY
	 IF @DWH_SK_DEALER_KEY = 0 
		 BEGIN
			--STEP 7 INSERT NEW RECORD OF DIMENSION TO TARGET
			INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER (DEALER_CODE,DEALER_GROUP,DEALER_GROUP_ID,DEALER_NAME_THAI,DEALER_NAME_ENGLISH
										   ,IS_ACTIVE,VALID_FROM,VALID_TO,JOB_RUN_KEY
										   ,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS
										   ,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME,DEALER_JOIN_DATE
										   ,DEALER_QUIT_DATE,DEALER_ACTIVE_STATUS) 
						            VALUES (@STG_DEALER_CODE,@STG_DEALER_GROUP,@STG_DEALER_GROUP_ID,@STG_DEALER_NAME_THAI,@STG_DEALER_NAME_ENGLISH
								           ,'Y',CONVERT(DATE,'01/01/1900',103),CONVERT(DATE,'31/12/9999',103),@JOB_RUN_KEY
										   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME,@STG_DELETED_FLAG,''
										   ,@STG_SOURCE_LAST_UPDATE_DATE_TIME,GETDATE(),@STG_DEALER_JOIN_DATE
									       ,@STG_DEALER_QUIT_DATE,@STG_DEALER_ACTIVE_STATUS)

			SET @INS_CNT = @INS_CNT + 1
		 END
	 ELSE
		BEGIN
			--STEP 8 SELECT FIELD FOR DETECT CHANGE (REFER TO DETAILS DESIGN DOCUMENT)
			SELECT	@DWH_DEALER_GROUP = DEALER_GROUP
			FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
			WHERE	SK_DEALER_KEY = @DWH_SK_DEALER_KEY

			--STEP 9 DETECT CHANGE COLUMNS (REFER TO DETAILS DESIGN DOCUMENT)
			IF (@STG_DEALER_GROUP <> @DWH_DEALER_GROUP) AND (@STG_DEALER_GROUP <> '') AND (@DWH_DEALER_GROUP <> '')
				BEGIN
					--STEP 10 UPDATE OLD RECORD STATUS OF DIMENSION TO INACTIVE AND VALID_TO
					UPDATE	GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
					SET		IS_ACTIVE = 'N',VALID_TO = CONVERT(DATE,CONVERT(VARCHAR(10),DATEADD(DAY,-1,GETDATE()),103),103)
					WHERE	SK_DEALER_KEY = @DWH_SK_DEALER_KEY

					--STEP 11 INSERT CHANGE RECORD OF DIMENSION TO TARGET TABLE ***VALID FROM
					INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER (DEALER_CODE,DEALER_GROUP,DEALER_GROUP_ID,DEALER_NAME_THAI,DEALER_NAME_ENGLISH
												   ,IS_ACTIVE,VALID_FROM,VALID_TO,JOB_RUN_KEY
												   ,SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME,DELETED_FLAG,COMMENTS
												   ,SOURCE_LAST_UPDATE_DATE_TIME,LAST_UPDATE_DATE_TIME,DEALER_JOIN_DATE
										           ,DEALER_QUIT_DATE,DEALER_ACTIVE_STATUS) 
											VALUES (@STG_DEALER_CODE,@STG_DEALER_GROUP,@STG_DEALER_GROUP_ID,@STG_DEALER_NAME_THAI,@STG_DEALER_NAME_ENGLISH
												   ,'Y',CONVERT(DATE,CONVERT(VARCHAR(10),GETDATE(),103),103),CONVERT(DATE,'31/12/9999',103),@JOB_RUN_KEY
												   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME,@STG_DELETED_FLAG,''
												   ,@STG_SOURCE_LAST_UPDATE_DATE_TIME,GETDATE(),@STG_DEALER_JOIN_DATE
									               ,@STG_DEALER_QUIT_DATE,@STG_DEALER_ACTIVE_STATUS)

					SET @INS_CNT = @INS_CNT + 1
				END
			ELSE
				--STEP 12 IF THERE IS FILE MAPPING TO MAINTAIN CHECK NEW VALUE FROM MAINTAINANCE FILE
				IF (@DWH_DEALER_GROUP = '') AND (@STG_DEALER_GROUP <> '')
					BEGIN
						--STEP 13 UPDATE OLD RECORD VALUE WITH THE NEW VALUE (UPDATE DETECT CHANGE FIELD WITH THE NEW ONE THAT IS NOT NULL)
						UPDATE	 GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
						SET		 DEALER_GROUP = @STG_DEALER_GROUP
								,DEALER_GROUP_ID = @STG_DEALER_GROUP_ID
								,DEALER_NAME_THAI = @STG_DEALER_NAME_THAI
								,DEALER_NAME_ENGLISH = @STG_DEALER_NAME_ENGLISH
								,JOB_RUN_KEY = @JOB_RUN_KEY
								,SOURCE_SYSTEM_CODE = @STG_SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME = @STG_SOURCE_TABLE_NAME
								,DELETED_FLAG = @STG_DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME = @STG_SOURCE_LAST_UPDATE_DATE_TIME
								,LAST_UPDATE_DATE_TIME = GETDATE()
								,DEALER_JOIN_DATE = @STG_DEALER_JOIN_DATE
								,DEALER_QUIT_DATE = @STG_DEALER_QUIT_DATE
								,DEALER_ACTIVE_STATUS = @STG_DEALER_ACTIVE_STATUS 
						WHERE	 SK_DEALER_KEY = @DWH_SK_DEALER_KEY

						SET @UPD_CNT = @UPD_CNT + 1
					END
				ELSE
					BEGIN
						--STEP 14 UPDATE OLD RECORD VALUE WITH THE NEW VALUE
						UPDATE	 GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
						SET		 DEALER_GROUP_ID = @STG_DEALER_GROUP_ID
								,DEALER_NAME_THAI = @STG_DEALER_NAME_THAI
								,DEALER_NAME_ENGLISH = @STG_DEALER_NAME_ENGLISH
								,JOB_RUN_KEY = @JOB_RUN_KEY
								,SOURCE_SYSTEM_CODE = @STG_SOURCE_SYSTEM_CODE,SOURCE_TABLE_NAME = @STG_SOURCE_TABLE_NAME
								,DELETED_FLAG = @STG_DELETED_FLAG,SOURCE_LAST_UPDATE_DATE_TIME = @STG_SOURCE_LAST_UPDATE_DATE_TIME
								,LAST_UPDATE_DATE_TIME = GETDATE()
								,DEALER_JOIN_DATE = @STG_DEALER_JOIN_DATE
								,DEALER_QUIT_DATE = @STG_DEALER_QUIT_DATE
								,DEALER_ACTIVE_STATUS = @STG_DEALER_ACTIVE_STATUS
						WHERE	 SK_DEALER_KEY = @DWH_SK_DEALER_KEY

						SET @UPD_CNT = @UPD_CNT + 1
					END
		END


	 --STEP 15 FETCH STAGING VALUE INTO VARIABLE
	 FETCH NEXT FROM MST_DEALER_Cursor INTO @STG_DEALER_CODE,@STG_DEALER_GROUP,@STG_DEALER_GROUP_ID,@STG_DEALER_NAME_THAI,@STG_DEALER_NAME_ENGLISH
										   ,@STG_SOURCE_SYSTEM_CODE,@STG_SOURCE_TABLE_NAME
										   ,@STG_DELETED_FLAG,@STG_SOURCE_LAST_UPDATE_DATE_TIME,@STG_DEALER_JOIN_DATE
										   ,@STG_DEALER_QUIT_DATE,@STG_DEALER_ACTIVE_STATUS
 END

 --STEP 16 CLOSE CURSOR
 CLOSE MST_DEALER_Cursor   
 DEALLOCATE MST_DEALER_Cursor

 --STEP 17 COUNT NUMBER OF ROW FROM TARGET TABLE
 SELECT @DWH_CNT = COUNT(*) FROM GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER WHERE JOB_RUN_KEY = @JOB_RUN_KEY

 --STEP 18 CHECK DUMMY RECORD (-1 UNDEFINE)
 SELECT	@DUM_CNT = COUNT(*) 
 FROM	GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
 WHERE	[DEALER_CODE] = '-1'

 --STEP 19 INSERT DUMMY RECORD (-1 UNDEFINE)
 IF @DUM_CNT = 0
 BEGIN
	INSERT INTO GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER
	(
		   [DEALER_CODE]
		  ,[DEALER_GROUP]
		  ,[DEALER_GROUP_ID]
		  ,[DEALER_NAME_THAI]
		  ,[DEALER_NAME_ENGLISH]
		  ,[IS_ACTIVE]
		  ,[VALID_FROM]
		  ,[VALID_TO]
		  ,[JOB_RUN_KEY]
		  ,[SOURCE_SYSTEM_CODE]
		  ,[SOURCE_TABLE_NAME]
		  ,[DELETED_FLAG]
		  ,[COMMENTS]
		  ,[SOURCE_LAST_UPDATE_DATE_TIME]
		  ,[LAST_UPDATE_DATE_TIME]
		  ,[DEALER_JOIN_DATE]
          ,[DEALER_QUIT_DATE]
		  ,[DEALER_ACTIVE_STATUS]
	)
		 VALUES
			   (
				'-1'
			   ,'UN-DEFINED'
			   ,'9999'
			   ,'UN-DEFINED'
			   ,'UN-DEFINED'
			   ,'Y'
			   ,CONVERT(DATE,'01/01/1900',103)
			   ,CONVERT(DATE,'31/12/9999',103)
			   ,'0'
			   ,''
			   ,''
			   ,''
			   ,''
			   ,GETDATE()
			   ,GETDATE()
			   ,CONVERT(DATE,'01/01/1900',103)
			   ,CONVERT(DATE,'31/12/9999',103)
			   ,'A'
			   )
 END

 RETURN_POINT:
	SELECT @STG_CNT AS COUNT_STAGING,@DWH_CNT AS COUNT_WAREHOUSE,@UPD_CNT AS ROWS_UPDATED,@INS_CNT AS ROWS_INSERT
END


GO

