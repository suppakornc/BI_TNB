USE [GL_TNB_MRT]
GO

/****** Object:  StoredProcedure [PPL].[DWH2_DIM_REQ_STATUS_GRP]    Script Date: 12/22/2016 11:10:03 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [PPL].[DWH2_DIM_REQ_STATUS_GRP]
AS
BEGIN
/* Stored Procedure Name	:  PPL.DWH2_DIM_REQ_STATUS_GRP
 * Source Tables			:  GL_TNB_DWH.DIM.DWH_TNB_DIM_REQ_STATUS_GRP
 * Purpose					:  To replicate data from GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS to GL_TNB_MRT.DIM.DWH_TNB_DIM_REQ_STATUS_GRP
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-09-13     Suppakorn.C		  Creation of this initialization script.
 */

 --STEP 1 DELETE DIM DATA IN DATA MART
 DELETE [GL_TNB_MRT].[DIM].[MRT_TNB_DIM_REQ_STATUS_GRP]

 --STEP 2 INSERT DIM DATA FROM DATA WAREHOUSE TO DATA MART
 BEGIN

	 INSERT INTO [GL_TNB_MRT].[DIM].[MRT_TNB_DIM_REQ_STATUS_GRP]
		SELECT SK_REQ_STATUS_GRP_KEY
			,REQ_STATUS_GRP_CODE
			,REQ_STATUS_GRP_DESC
			,COMMENTS
			,LAST_UPDATE_DATE_TIME
		FROM (
			SELECT '1' AS SK_REQ_STATUS_GRP_KEY
				,'S1' AS REQ_STATUS_GRP_CODE
				,'NCB' AS REQ_STATUS_GRP_DESC
				,'' AS COMMENTS
				,GETDATE() AS LAST_UPDATE_DATE_TIME

			UNION ALL

			SELECT DISTINCT SUBSTRING(REQ_STATUS_GRP_CODE,2,LEN(REQ_STATUS_GRP_CODE)-1) AS SK_REQ_STATUS_GRP_KEY
				,REQ_STATUS_GRP_CODE
				,REQ_STATUS_GRP_DESC
				,COMMENTS
				,GETDATE() AS LAST_UPDATE_DATE_TIME
			 FROM	 [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_REQUEST_STATUS]
		) REQ_GRP
 END
END
GO

/****** Object:  StoredProcedure [PPL].[DWH2_FCT_APPROVAL_LEADTIME]    Script Date: 12/22/2016 11:11:11 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [PPL].[DWH2_FCT_APPROVAL_LEADTIME]
AS
BEGIN
/* Stored Procedure Name	:  PPL.DWH2_FCT_APPROVAL_LEADTIME
 * Source Tables			:  GL_TNB_DWH.FACT.MRT_TNB_FCT_APPROVAL_LEADTIME
 * Purpose					:  To replicate data from GL_TNB_DWH.FACT.DWH_TNB_FCT_REQ_MOVEMENT_STATUS to GL_TNB_MRT.FACT.MRT_TNB_FCT_APPROVAL_LEADTIME
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-12-02     Suppakorn.C		  Creation of this initialization script.
 */

 --STEP 1 DELETE PREVIOUS DATA FROM DATA MART (LAST 60 DAYS)
 DELETE GL_TNB_MRT.FACT.MRT_TNB_FCT_APPROVAL_LEADTIME


 --STEP 2 INSERT DATA FROM DATA WAREHOUSE TO DATA MART
	BEGIN
		INSERT	 INTO GL_TNB_MRT.FACT.MRT_TNB_FCT_APPROVAL_LEADTIME
		SELECT DIM_DATE.DATE_KEY AS SK_DATE_KEY
			  ,DIM_BRANCH.SK_BRANCH_KEY	
			  ,DIM_DEALER.SK_DEALER_KEY										
			  ,DIM_PRODUCT.SK_PRODUCT_KEY
			  ,TOTAL.REQ_STATUS_GRP_CODE												
			  ,SUM(TOTAL.SUM_LEAD_TIME) AS TOTAL_DURATION											
			  ,COUNT(TOTAL.REQ_DOC) AS TOTAL_REQUEST												
			  ,'' AS COMMENTS
			  ,GETDATE() AS LAST_UPDATE_DATE_TIME										
		FROM (													
			SELECT T3.REQ_DOC												
				  ,T3.DOC_DATE											
				  ,T3.BRANCH_CODE
				  ,T3.DEALER_CODE											
				  ,T3.PRODUCT_CODE											
				  ,T3.REQ_STATUS_GRP_CODE											
				  ,CASE 
						WHEN SUM(T3.ROUND_STEP)	< 1 THEN 0
						ELSE SUM(T3.DURATION)/SUM(T3.ROUND_STEP)
				   END AS SUM_LEAD_TIME									 /** Average Lead Time per Req_DOC **/							
			FROM (												
				SELECT *											
				  ,CASE WHEN T2.ROW1 = '1' THEN 1											
						WHEN T2.REQ_STATUS_GRP_CODE <> T2.PREV_STEP THEN 1									
						ELSE 0									
					END AS ROUND_STEP										
				  /***  Calculate number of minutes from Previous Record Time to End Time  ***/											
				  ,CASE WHEN CONVERT(VARCHAR(10),T2.PREV_DATE_TIME,110) = CONVERT(VARCHAR(10),T2.END_DATE_TIME,110) THEN DATEDIFF(MI,T2.PREV_DATE_TIME,T2.END_DATE_TIME)											
						ELSE DATEDIFF(MI,T2.PREV_DATE_TIME,T2.END_DATE_TIME) 									
							- (DATEDIFF(DAY,T2.PREV_DATE_TIME,T2.END_DATE_TIME)*870)   
							   /** 870 is num of minutes from 18:00 to 08:30 **/								
							- (PPL.NUMDAYINPERIOD(DATEADD(DAY,DATEDIFF(DAY,0,T2.PREV_DATE_TIME),1),DATEADD(DAY,DATEDIFF(DAY,0,T2.END_DATE_TIME),-1),'Sunday')*570)	
							   /** 570 is num of minutes from 08:30 to 18:00 on Sunday **/							
					END AS DURATION										
				FROM (											
					SELECT T1.ROW1										
						  ,T1.REQ_DOC									
						  ,T1.DOC_DATE
						  ,T1.BRANCH_CODE
						  ,T1.DEALER_CODE									
						  ,T1.PRODUCT_CODE									
						  ,T1.REQ_STATUS_GRP_CODE									
						  ,T1.START_DATE_TIME									
						  ,T1.END_DATE_TIME									
						  ,FIRST_VALUE(T1.REQ_STATUS_GRP_CODE) 									
								OVER(partition by T1.REQ_DOC order by T1.REQ_DOC,T1.START_DATE_TIME,T1.END_DATE_TIME							
								rows between 1 preceding and current row ) AS PREV_STEP	/** seelct REQ_STATUS_GRP_CODE from previous row **/						
						  ,CASE WHEN T1.ROW1 = '1' THEN T1.START_DATE_TIME								
								ELSE FIRST_VALUE(T1.END_DATE_TIME) 							
										over(partition by T1.REQ_DOC order by T1.REQ_DOC,T1.START_DATE_TIME,T1.END_DATE_TIME					
										rows between 1 preceding and current row )	    /** seelct end_date_time from previous row **/				
							END AS PREV_DATE_TIME								
					FROM (										
							SELECT ROW_NUMBER() OVER (PARTITION BY REQ.[REQ_DOC] ORDER BY REQ.[REQ_DOC] ASC								
															  ,REQ.[START_DATE_TIME] ASC
															  ,REQ.[END_DATE_TIME] ASC) AS ROW1
								  ,REQ.[REQ_DOC]											
								  ,CONVERT(DATETIME,CONVERT(VARCHAR(10),REQ.DOC_DATE,103),103) AS DOC_DATE
								  ,REQ.BRANCH_CODE
								  ,REQ.DEALER_CODE
								  ,REQ.PRODUCT_CODE					
								  ,REQ.[PREV_REQUEST_STATUS]							
								  ,REQ.[REQUEST_STATUS]							
								  ,CASE
									WHEN REQ.[REQUEST_STATUS] = '#N' THEN 'S1'
									ELSE REQ_STATUS.REQ_STATUS_GRP_CODE
								   END AS REQ_STATUS_GRP_CODE
								  ,REQ.[START_DATE_TIME]							
								  ,REQ.[END_DATE_TIME]							
							FROM [GL_TNB_DWH].[FACT].[DWH_TNB_FCT_REQ_MOVEMENT_STATUS] REQ								
							LEFT OUTER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_REQUEST_STATUS REQ_STATUS
								ON 	REQ.[REQUEST_STATUS] = REQ_STATUS.REQUEST_STATUS_CODE
							WHERE REQ.REQ_DOC NOT IN (	select REQ_DOC from [GL_TNB_DWH].[FACT].[DWH_TNB_FCT_REQ_MOVEMENT_STATUS]							
													where REQUEST_STATUS IN ('B9','U'))		
							--	AND REQ.[REQ_DOC] in ('59007401','59007400')							
						) T1									
					) T2										
				) T3											
			GROUP BY T3.REQ_DOC
					,T3.DOC_DATE
					,T3.BRANCH_CODE
					,T3.DEALER_CODE
					,T3.PRODUCT_CODE
					,T3.REQ_STATUS_GRP_CODE
		) TOTAL													
		INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_DATE] DIM_DATE													
			ON TOTAL.DOC_DATE = DIM_DATE.DATE_TIME
		LEFT JOIN [GL_TNB_DWH].[DIM].DWH_TNB_DIM_BRANCH DIM_BRANCH
			ON TOTAL.BRANCH_CODE = DIM_BRANCH.BRANCH_CODE
			  AND TOTAL.DOC_DATE BETWEEN DIM_BRANCH.VALID_FROM AND DIM_BRANCH.VALID_TO
		LEFT JOIN [GL_TNB_DWH].[DIM].DWH_TNB_DIM_DEALER DIM_DEALER
			ON TOTAL.DEALER_CODE = DIM_DEALER.DEALER_CODE
			  AND TOTAL.DOC_DATE BETWEEN DIM_DEALER.VALID_FROM AND DIM_DEALER.VALID_TO
		LEFT JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_PRODUCT] DIM_PRODUCT													
			ON TOTAL.PRODUCT_CODE = DIM_PRODUCT.PRODUCT_CODE
			  AND TOTAL.DOC_DATE BETWEEN DIM_PRODUCT.VALID_FROM AND DIM_PRODUCT.VALID_TO
		GROUP BY DIM_DATE.DATE_KEY
				,DIM_BRANCH.SK_BRANCH_KEY	
				,DIM_DEALER.SK_DEALER_KEY										
				,DIM_PRODUCT.SK_PRODUCT_KEY	
				,TOTAL.REQ_STATUS_GRP_CODE									
		ORDER BY DIM_DATE.DATE_KEY ASC
				,DIM_BRANCH.SK_BRANCH_KEY ASC
				,DIM_DEALER.SK_DEALER_KEY ASC								
				,DIM_PRODUCT.SK_PRODUCT_KEY ASC
				,TOTAL.REQ_STATUS_GRP_CODE ASC
	END

END
GO

/****** Object:  StoredProcedure [PPL].[DWH2_FCT_BRANCH_AND_DEALER]    Script Date: 12/22/2016 11:12:13 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [PPL].[DWH2_FCT_BRANCH_AND_DEALER]
AS
BEGIN
/* Stored Procedure Name	:  PPL.DWH2_FCT_BRANCH_AND_DEALER
 * Source Tables			:  GL_TNB_DWH.FACT.DWH_TNB_FCT_BRANCH_AND_DEALER
 * Purpose					:  To load data from GL_TNB_DWH.FACT.DWH_TNB_FCT_BRANCH_AND_DEALER to GL_TNB_MRT.FACT.MRT_TNB_FCT_BRANCH_AND_DEALER
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-12-09     Jirapong.C			  Creation of this initialization script.
 */

 --STEP 1 TRUNCATE DATA MART TABLE
 TRUNCATE TABLE [GL_TNB_MRT].[FACT].[MRT_TNB_FCT_BRANCH_AND_DEALER]

 --STEP 2 LOAD DATA MART TABLE 
 ;WITH dt (DATE_TIME,[MONTH],[YEAR])  
 AS  
 (
 SELECT DATE_TIME
 ,CONVERT(INT,[MONTH]) AS [MONTH]
 ,CONVERT(INT,[YEAR]) AS [YEAR]
 FROM [GL_TNB_MRT].[DIM].[MRT_TNB_DIM_DATE]
 WHERE DATE_TIME <= GETDATE()
 GROUP BY CONVERT(INT,[MONTH]),CONVERT(INT,[YEAR]),DATE_TIME
 )
 INSERT INTO [GL_TNB_MRT].[FACT].[MRT_TNB_FCT_BRANCH_AND_DEALER]
 (
 DATA_YEAR
 ,DATA_MONTH
 ,TOTAL_BRANCH
 ,TOTAL_DEALER
 ,TOTAL_ACTIVE_DEALER
 ,TOTAL_APPROVE
 ,COMMENTS
 )
 SELECT 
 branch.[YEAR] AS DATA_YEAR
 ,branch.[MONTH] AS DATA_MONTH
 ,COALESCE(branch.TOTAL_BRANCH,0) AS TOTAL_BRANCH
 ,COALESCE(dealer.TOTAL_DEALER,0) AS TOTAL_DEALER
 ,COALESCE(actv_d.TOTAL_ACTIVE_DEALER,0) AS TOTAL_ACTIVE_DEALER
 ,COALESCE(TOTAL_APPROVE,0) AS TOTAL_APPROVE
 ,'' AS COMMENTS
 FROM 
 (
 SELECT
 COUNT(DISTINCT TAKE_CARE_BY_BRANCH_CODE) AS TOTAL_BRANCH
 ,[MONTH]
 ,[YEAR]
 FROM dt a
 LEFT JOIN
 (
 SELECT TAKE_CARE_BY_BRANCH_CODE
 	,DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,MIN(BRANCH_CREATE_DATE))+1,0)) AS BRANCH_CREATE_D
 	,ISNULL(DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,MAX(BRANCH_CLOSE_DATE))+1,0)),'9999-12-31') AS BRANCH_CLOSE_D
 FROM [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_BRANCH]
 GROUP BY TAKE_CARE_BY_BRANCH_CODE
 ) b
 ON a.DATE_TIME BETWEEN b.BRANCH_CREATE_D AND BRANCH_CLOSE_D
 GROUP BY [MONTH],[YEAR]
 ) branch
 LEFT JOIN
 (
 SELECT 
 	YEAR(APPROVE_LOAN_DATE) AS [YEAR]
 	,MONTH(APPROVE_LOAN_DATE) AS [MONTH]
 	,COUNT(*) AS TOTAL_ACTIVE_DEALER
 FROM
 	(
 	SELECT 
 		a.APPROVE_LOAN_DATE
 		,a.DEALER_CODE AS ACTIVE_DEALER
 		,ROW_NUMBER() OVER(PARTITION BY a.DEALER_CODE,YEAR(a.APPROVE_LOAN_DATE),MONTH(a.APPROVE_LOAN_DATE) ORDER BY a.APPROVE_LOAN_DATE ASC) R
 	FROM [GL_TNB_DWH].[FACT].[DWH_TNB_FCT_APP_CONTRACT] a
 	JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_DEALER] b
 	ON LTRIM(a.DEALER_CODE) = LTRIM(b.DEALER_CODE) AND a.APPROVE_LOAN_DATE BETWEEN b.DEALER_JOIN_DATE AND ISNULL(b.DEALER_QUIT_DATE,'9999-12-31')
 	WHERE a.DEALER_CODE <> '-1'
 	) TMP WHERE R = 1
 GROUP BY YEAR(APPROVE_LOAN_DATE),MONTH(APPROVE_LOAN_DATE)
 ) actv_d
 ON branch.[YEAR] = actv_d.[YEAR] AND branch.[MONTH] = actv_d.[MONTH]
 LEFT JOIN
 	(
 	SELECT
 		COUNT(DISTINCT DEALER_CODE) AS TOTAL_DEALER
 		,[MONTH]
 		,[YEAR]
 	FROM dt a
 	LEFT JOIN
 		(
 		SELECT 
 			DEALER_CODE
 			,MAX(DEALER_JOIN_DATE) AS DEALER_JOIN_D
 			,ISNULL(MIN(DEALER_QUIT_DATE),'9999-12-31') AS DEALER_QUIT_D
 		FROM [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_DEALER]
 		WHERE DEALER_CODE <> '-1'
 		GROUP BY DEALER_CODE
 		) b
 	ON a.DATE_TIME BETWEEN b.DEALER_JOIN_D AND DEALER_QUIT_D
	WHERE (MONTH(DEALER_QUIT_D) <> a.[MONTH] OR YEAR(DEALER_QUIT_D) <> a.[YEAR]) 
 	GROUP BY [MONTH],[YEAR]
 	) dealer
 ON branch.[YEAR] = dealer.[YEAR] AND branch.[MONTH] = dealer.[MONTH]
 LEFT JOIN
 	(
 	SELECT 
 		YEAR(APPROVE_LOAN_DATE) AS [YEAR]
 		,MONTH(APPROVE_LOAN_DATE) AS [MONTH]
 		,COUNT(DISTINCT DOC_NO) AS TOTAL_APPROVE
 	FROM [GL_TNB_DWH].[FACT].[DWH_TNB_FCT_APP_CONTRACT] a
 	WHERE a.DEALER_CODE <> '-1'
 	GROUP BY MONTH(APPROVE_LOAN_DATE) , YEAR(APPROVE_LOAN_DATE)
 	) approve
 ON branch.[YEAR] = approve.[YEAR] AND branch.[MONTH] = approve.[MONTH]
END
GO

/****** Object:  StoredProcedure [PPL].[DWH2_FCT_VINTAGE_PERF]    Script Date: 12/22/2016 11:13:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [PPL].[DWH2_FCT_VINTAGE_PERF]
AS
BEGIN
/* Stored Procedure Name	:  PPL.DWH2_FCT_VINTAGE_PERF
 * Source Tables			:  DWH_TNB_FCT_CONTRACT_MONTHLY JOIN DWH_TNB_FCT_APP_CONTRACT
 * Purpose					:  To calculate data for Vintage Performance Report
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-12-06     Suppakorn.C		  Creation of this initialization script.
 *            2017-02-10     Suppakorn.C		  Change script for calculate Begin_Financial_Amount
 */

 --STEP 1 DELETE PREVIOUS DATA FROM DATA MART
 DELETE GL_TNB_MRT.FACT.MRT_TNB_FCT_VINTAGE_PERF


 --STEP 2 INSERT DATA FROM DATA WAREHOUSE TO DATA MART
	BEGIN
		INSERT INTO GL_TNB_MRT.FACT.MRT_TNB_FCT_VINTAGE_PERF
		SELECT	 DA.DATE_KEY AS SK_DATE_KEY
				,PD.SK_PRODUCT_KEY
				,VINTAGE.CK_MOB
				,VINTAGE.BOT_A_FINANCE_AMT
				,VINTAGE.BOT_M_FINANCE_AMT
				,VINTAGE.BOT_S_FINANCE_AMT
				,VINTAGE.BOT_D_FINANCE_AMT
				,VINTAGE.BOT_L_FINANCE_AMT
				,BEG.BIGIN_FINANCE_AMT
				,'' AS COMMENTS
				,GETDATE() AS LAST_UPDATE_DATE_TIME
		FROM	(SELECT	 EOMONTH(AC.APPROVE_LOAN_DATE) AS DATA_DATE
						,AC.PRODUCT_CODE
						,DATEDIFF(MONTH,AC.APPROVE_LOAN_DATE,CM.DATA_DATE) AS CK_MOB
						,SUM(CASE 
							WHEN CM.BOT_CLASS_CODE = 'A' THEN AC.FINANCIAL_AMOUNT
							ELSE 0
						 END) AS BOT_A_FINANCE_AMT
						,SUM(CASE 
							WHEN CM.BOT_CLASS_CODE = 'M' THEN AC.FINANCIAL_AMOUNT
							ELSE 0
						 END) AS BOT_M_FINANCE_AMT
						,SUM(CASE 
							WHEN CM.BOT_CLASS_CODE = 'S' THEN AC.FINANCIAL_AMOUNT
							ELSE 0
						 END) AS BOT_S_FINANCE_AMT
						,SUM(CASE 
							WHEN CM.BOT_CLASS_CODE = 'D' THEN AC.FINANCIAL_AMOUNT
							ELSE 0
						 END) AS BOT_D_FINANCE_AMT
						,SUM(CASE 
							WHEN CM.BOT_CLASS_CODE = 'L' THEN AC.FINANCIAL_AMOUNT
							ELSE 0
						 END) AS BOT_L_FINANCE_AMT			 
				FROM GL_TNB_DWH.[FACT].[DWH_TNB_FCT_CONTRACT_MONTHLY] CM
				INNER JOIN GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT AC
					ON CM.DOC_NO = AC.DOC_NO
					AND CM.CHECK_DIGIT = AC.CHECK_DIGIT
				WHERE  CM.BOT_CLASS_CODE IN ('A','M','S','D','L')
					AND DATEDIFF(MONTH,AC.APPROVE_LOAN_DATE,CM.DATA_DATE) >= 0
				GROUP BY EOMONTH(AC.APPROVE_LOAN_DATE)
						,AC.PRODUCT_CODE
						,DATEDIFF(MONTH,AC.APPROVE_LOAN_DATE,CM.DATA_DATE)
				) VINTAGE
				LEFT JOIN (      /*---------- Find Begin Investment Amt. ---------*/
						SELECT	 EOMONTH(AC.APPROVE_LOAN_DATE) AS DATA_DATE
								,PRODUCT_CODE
								,SUM(FINANCIAL_AMOUNT) AS BIGIN_FINANCE_AMT
						FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT AC
						GROUP BY EOMONTH(AC.APPROVE_LOAN_DATE)
								,PRODUCT_CODE
				) BEG
					ON VINTAGE.DATA_DATE = BEG.DATA_DATE
					  AND VINTAGE.PRODUCT_CODE = BEG.PRODUCT_CODE
				INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_DATE DA
					ON VINTAGE.DATA_DATE = DA.DATE_TIME
				INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_PRODUCT PD
					ON VINTAGE.PRODUCT_CODE = PD.PRODUCT_CODE
					AND VINTAGE.DATA_DATE BETWEEN PD.VALID_FROM AND PD.VALID_TO
	END

END

/****** Object:  StoredProcedure [PPL].[DWH2_FCT_REPOSSESSION]    Script Date: 12/22/2016 11:13:47 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [PPL].[DWH2_FCT_REPOSSESSION]
AS
BEGIN
/* Stored Procedure Name	:  PPL.DWH2_FCT_REPOSSESSION
 * Source Tables			:  DWH_TNB_FCT_CONTRACT_MONTHLY JOIN DWH_TNB_FCT_APP_CONTRACT
 * Purpose					:  To calculate data for Repossession Report
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-12-09     Suppakorn.C		  Creation of this initialization script.
 *            2017-01-23     Suppakorn.C		  Add Step 3. Show Repossession Unit in current month
 */

 --STEP 1 DELETE PREVIOUS DATA FROM DATA MART
 DELETE GL_TNB_MRT.FACT.MRT_TNB_FCT_REPOSSESSION


 --STEP 2 INSERT DATA FROM DATA WAREHOUSE TO DATA MART FROM AVAILABLE DATE TO LAST MONTH
	BEGIN
		INSERT INTO GL_TNB_MRT.FACT.MRT_TNB_FCT_REPOSSESSION
		SELECT	 DA.DATE_KEY AS SK_DATE_KEY
				,PRODUCT.SK_PRODUCT_KEY
				,BRANCH.SK_BRANCH_KEY
				,DEALER.SK_DEALER_KEY
				,DWH.TOTAL_REPO_UNIT
				,DWH.TOTAL_UNIT
				,DWH.TOTAL_REPO_PAID_PERIOD
				,DWH.TOTAL_REPO_OVERDUE_PERIOD
				,DWH.TOTAL_TERM_TO_REPO
				,'' AS COMMENTS
				,GETDATE() AS LAST_UPDATE_DATE_TIME
		FROM (
			SELECT	 COALESCE(REPO.REPO_DATE,TOTAL.DATA_DATE) AS DATA_DATE
					,COALESCE(REPO.PRODUCT_CODE,TOTAL.PRODUCT_CODE) AS PRODUCT_CODE
					,COALESCE(REPO.BRANCH_CODE,TOTAL.BRANCH_CODE) AS BRANCH_CODE
					,COALESCE(REPO.DEALER_CODE,TOTAL.DEALER_CODE) AS DEALER_CODE
					,COALESCE(REPO.TOTAL_REPO_UNIT,0) AS TOTAL_REPO_UNIT
					,COALESCE(TOTAL.TOTAL_UNIT,0) AS TOTAL_UNIT
					,COALESCE(REPO.TOTAL_REPO_PAID_PERIOD,0) AS TOTAL_REPO_PAID_PERIOD
					,COALESCE(REPO.TOTAL_REPO_OVERDUE_PERIOD,0) AS TOTAL_REPO_OVERDUE_PERIOD
					,COALESCE(REPO.TOTAL_TERM_TO_REPO,0) AS TOTAL_TERM_TO_REPO
			FROM ( 
				SELECT	 RE.REPO_DATE
						,RE.PRODUCT_CODE
						,RE.BRANCH_CODE
						,RE.DEALER_CODE
						,COUNT(RE.DOC_NO) AS TOTAL_REPO_UNIT
						,SUM(RE.PAID_TERM) AS TOTAL_REPO_PAID_PERIOD
						,SUM(RE.REPO_TERM - RE.PAID_TERM) AS TOTAL_REPO_OVERDUE_PERIOD
						,SUM(RE.REPO_TERM) AS TOTAL_TERM_TO_REPO
				FROM 
				(
					SELECT	 CON.DOC_NO
							,CON.CHECK_DIGIT
							,COALESCE(CM.REPO_DATE,CON.REPO_DATE,CMP.REPO_DATE) AS REPO_DATE -- IF NO REPO_DATE IN CONTRACT_MONTHLY , USE REPO_DATE IN APP_CONTRACT
							,CON.PRODUCT_CODE
							,CON.BRANCH_CODE
							,CON.DEALER_CODE
							,CON.TOTAL_TERM
							,COALESCE(CASE 
								-- CHECK CASE IF INSTALLMENT_AMOUNT = 0 THEN CANN'T DIVISION
								WHEN CON.INSTALLMENT_AMOUNT <= 0 OR CMP.PAY_PRINCIPAL <= 0 THEN 0
								-- CHECK IF RESULT GREATER THAN OR EQUAL TOTAL_TERM , USE TOTAL_TERM
								WHEN ROUND(CMP.PAY_PRINCIPAL / CON.INSTALLMENT_AMOUNT,2) >= CON.TOTAL_TERM THEN CON.TOTAL_TERM
								-- NORMAL CASE
								ELSE ROUND(CMP.PAY_PRINCIPAL / CON.INSTALLMENT_AMOUNT,2)
							 END,0) AS PAID_TERM

							 ,COALESCE(CASE
								-- 1. CASE DAY OF REPO_DATE GREATER THAN OR EQUAL DAY OF DUE DATE
								--   1.1 CHECK TERM TO REPO GREATER THAN OR EQUAL TOTAL_TERM
								WHEN ( DAY(COALESCE(CM.REPO_DATE,CON.REPO_DATE)) -  DAY(CMP.START_REPO_DATE) >= 0 
									AND DATEDIFF(MM,CMP.START_REPO_DATE,COALESCE(CM.REPO_DATE,CON.REPO_DATE))+1 >= CON.TOTAL_TERM )
									THEN CON.TOTAL_TERM
								--   1.2 CASE TERM TO REPO LESS THAN TOTAL_TERM
								WHEN DAY(COALESCE(CM.REPO_DATE,CON.REPO_DATE)) -  DAY(CMP.START_REPO_DATE) >= 0 
									THEN DATEDIFF(MM,CMP.START_REPO_DATE,COALESCE(CM.REPO_DATE,CON.REPO_DATE))+1
								-- 2. CASE DAY OF REPO_DATE LESS THAN DAY OF DUE DATE
								--   2.1 CHECK TERM TO REPO GREATER THAN OR EQUAL TOTAL_TERM
								WHEN ( DAY(COALESCE(CM.REPO_DATE,CON.REPO_DATE)) -  DAY(CMP.START_REPO_DATE) < 0
									AND DATEDIFF(MM,CMP.START_REPO_DATE,COALESCE(CM.REPO_DATE,CON.REPO_DATE)) >= CON.TOTAL_TERM )
									THEN CON.TOTAL_TERM
								--   2.2 CASE TERM TO REPO LESS THAN TOTAL_TERM
								WHEN DAY(COALESCE(CM.REPO_DATE,CON.REPO_DATE)) -  DAY(CMP.START_REPO_DATE) < 0 
									THEN DATEDIFF(MM,CMP.START_REPO_DATE,COALESCE(CM.REPO_DATE,CON.REPO_DATE))
							 END,0) AS REPO_TERM
					FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT CON
					INNER JOIN (
						SELECT DISTINCT DOC_NO
							  ,CHECK_DIGIT
							  ,REPO_DATE
						FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY
						WHERE REPO_DATE IS NOT NULL
					) CM
					  ON CON.DOC_NO = CM.DOC_NO
						  AND CON.CHECK_DIGIT = CM.CHECK_DIGIT
					LEFT JOIN 
						(
						SELECT 
							A.DOC_NO
							,A.CHECK_DIGIT
							,C.START_REPO_DATE
							,C.END_REPO_DATE AS REPO_DATE
							,SUM(COALESCE(A.PAY_PRINCIPAL,0)) PAY_PRINCIPAL
						FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY A
						JOIN 
							(
							SELECT 
								DOC_NO
								,CHECK_DIGIT
								,FIRST_DUE_DATE
								,CASE 
								WHEN FIRST_VALUE(REPO_DATE) OVER(PARTITION BY DOC_NO,CHECK_DIGIT ORDER BY REPO_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW ) = REPO_DATE
									THEN FIRST_DUE_DATE
								ELSE FIRST_VALUE(REPO_DATE) OVER(PARTITION BY DOC_NO,CHECK_DIGIT ORDER BY REPO_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW )
								END AS START_REPO_DATE
								,REPO_DATE AS END_REPO_DATE
							FROM
								(	
								SELECT 
									DISTINCT A.REPO_DATE
									,A.DOC_NO
									,A.CHECK_DIGIT
									,B.FIRST_DUE_DATE
								FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY A
								JOIN GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT B
								ON A.DOC_NO = B.DOC_NO
								AND A.CHECK_DIGIT = B.CHECK_DIGIT
								WHERE A.REPO_DATE IS NOT NULL
								) B
							)C 
						ON A.DOC_NO = C.DOC_NO AND A.DATA_DATE BETWEEN C.START_REPO_DATE AND C.END_REPO_DATE
						AND A.CHECK_DIGIT = C.CHECK_DIGIT
						WHERE A.REPO_DATE IS NULL
						GROUP BY 
							A.DOC_NO
							,A.CHECK_DIGIT
							,C.START_REPO_DATE
							,C.END_REPO_DATE
						) CMP
						ON CON.DOC_NO = CMP.DOC_NO
						  AND CON.CHECK_DIGIT = CMP.CHECK_DIGIT
						  AND COALESCE(CM.REPO_DATE,CON.REPO_DATE) = CMP.REPO_DATE
					WHERE (CON.REPO_DATE IS NOT NULL OR CM.REPO_DATE IS NOT NULL)
				) RE
				GROUP BY RE.REPO_DATE
						,RE.PRODUCT_CODE
						,RE.BRANCH_CODE
						,RE.DEALER_CODE
				) REPO 
				FULL JOIN (								
				 SELECT	 CM.DATA_DATE 
						,AC.PRODUCT_CODE 
						,AC.BRANCH_CODE 
						,AC.DEALER_CODE 
						,COUNT(*) AS TOTAL_UNIT			/*---------- Calculate Total Unit-----------*/
				 FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT AC 
				 INNER JOIN GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY CM 
				   ON AC.DOC_NO = CM.DOC_NO 
				   AND AC.CHECK_DIGIT = CM.CHECK_DIGIT 
				 WHERE CM.BOT_CLASS_CODE IN ('A','S','M','D','L')
				 GROUP BY CM.DATA_DATE 
						,AC.PRODUCT_CODE 
						,AC.BRANCH_CODE 
						,AC.DEALER_CODE 
				) TOTAL 
				ON REPO.REPO_DATE = TOTAL.DATA_DATE 
				  AND REPO.PRODUCT_CODE = TOTAL.PRODUCT_CODE 
				  AND REPO.BRANCH_CODE = TOTAL.BRANCH_CODE 
				  AND REPO.DEALER_CODE = TOTAL.DEALER_CODE
		) DWH
		INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_DATE DA
		  ON DWH.DATA_DATE = DA.DATE_TIME
		INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_PRODUCT PRODUCT
		  ON DWH.PRODUCT_CODE = PRODUCT.PRODUCT_CODE
			AND DWH.DATA_DATE BETWEEN PRODUCT.VALID_FROM AND PRODUCT.VALID_TO
		INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH BRANCH
		  ON DWH.BRANCH_CODE = BRANCH.BRANCH_CODE
			AND DWH.DATA_DATE BETWEEN BRANCH.VALID_FROM AND BRANCH.VALID_TO
		INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER DEALER
		  ON DWH.DEALER_CODE = DEALER.DEALER_CODE
			AND DWH.DATA_DATE BETWEEN DEALER.VALID_FROM AND DEALER.VALID_TO
		WHERE DWH.DATA_DATE <= DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())-1, -1)


--STEP 3 INSERT DATA FROM DATA WAREHOUSE TO DATA MART IN CURRENT MONTH
		INSERT INTO GL_TNB_MRT.FACT.MRT_TNB_FCT_REPOSSESSION
		SELECT	 DA.DATE_KEY AS SK_DATE_KEY
				,PRODUCT.SK_PRODUCT_KEY
				,BRANCH.SK_BRANCH_KEY
				,DEALER.SK_DEALER_KEY
				,DWH.TOTAL_REPO_UNIT
				,0 AS TOTAL_UNIT
				,DWH.TOTAL_REPO_PAID_PERIOD
				,DWH.TOTAL_REPO_OVERDUE_PERIOD
				,DWH.TOTAL_TERM_TO_REPO
				,'' AS COMMENTS
				,GETDATE() AS LAST_UPDATE_DATE_TIME
		FROM (
			SELECT   AC.REPO_DATE AS DATA_DATE
					,AC.PRODUCT_CODE
					,AC.BRANCH_CODE
					,AC.DEALER_CODE
					,COUNT(AC.DOC_NO) AS TOTAL_REPO_UNIT
					,SUM(AC.LAST_PAY_PERIOD) AS TOTAL_REPO_PAID_PERIOD
					,SUM(AC.REPO_TERM - AC.LAST_PAY_PERIOD) AS TOTAL_REPO_OVERDUE_PERIOD
					,SUM(AC.REPO_TERM) AS TOTAL_TERM_TO_REPO
			 FROM (
					 SELECT  DOC_NO
							,CHECK_DIGIT
							,PRODUCT_CODE
							,BRANCH_CODE
							,DEALER_CODE
							,REPO_DATE
							,LAST_PAY_PERIOD
							,COALESCE(CASE
								-- 1. CASE DAY OF REPO_DATE GREATER THAN OR EQUAL DAY OF DUE DATE
								--   1.1 CHECK TERM TO REPO GREATER THAN OR EQUAL TOTAL_TERM
								WHEN ( DAY(REPO_DATE) -  DAY(FIRST_DUE_DATE) >= 0 
									AND DATEDIFF(MM,FIRST_DUE_DATE,REPO_DATE)+1 >= TOTAL_TERM )
									THEN TOTAL_TERM
								--   1.2 CASE TERM TO REPO LESS THAN TOTAL_TERM
								WHEN DAY(REPO_DATE) -  DAY(FIRST_DUE_DATE) >= 0 
									THEN DATEDIFF(MM,FIRST_DUE_DATE,REPO_DATE)+1
								-- 2. CASE DAY OF REPO_DATE LESS THAN DAY OF DUE DATE
								--   2.1 CHECK TERM TO REPO GREATER THAN OR EQUAL TOTAL_TERM
								WHEN ( DAY(REPO_DATE) -  DAY(FIRST_DUE_DATE) < 0
									AND DATEDIFF(MM,FIRST_DUE_DATE,REPO_DATE) >= TOTAL_TERM )
									THEN TOTAL_TERM
								--   2.2 CASE TERM TO REPO LESS THAN TOTAL_TERM
								WHEN DAY(REPO_DATE) -  DAY(FIRST_DUE_DATE) < 0 
									THEN DATEDIFF(MM,FIRST_DUE_DATE,REPO_DATE)
								END,0) AS REPO_TERM
					FROM GL_TNB_DWH.FACT.DWH_TNB_FCT_APP_CONTRACT
					WHERE MONTH(REPO_DATE) = MONTH(GETDATE())
							AND YEAR(REPO_DATE) = YEAR(GETDATE())
				) AC
			GROUP BY AC.REPO_DATE
					,AC.PRODUCT_CODE
					,AC.BRANCH_CODE
					,AC.DEALER_CODE
				) DWH
		INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_DATE DA
			ON DWH.DATA_DATE = DA.DATE_TIME
		INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_PRODUCT PRODUCT
			ON DWH.PRODUCT_CODE = PRODUCT.PRODUCT_CODE
			AND DWH.DATA_DATE BETWEEN PRODUCT.VALID_FROM AND PRODUCT.VALID_TO
		INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_BRANCH BRANCH
			ON DWH.BRANCH_CODE = BRANCH.BRANCH_CODE
			AND DWH.DATA_DATE BETWEEN BRANCH.VALID_FROM AND BRANCH.VALID_TO
		INNER JOIN GL_TNB_DWH.DIM.DWH_TNB_DIM_DEALER DEALER
			ON DWH.DEALER_CODE = DEALER.DEALER_CODE
			AND DWH.DATA_DATE BETWEEN DEALER.VALID_FROM AND DEALER.VALID_TO

	END

END
GO

/****** Object:  StoredProcedure [PPL].[DWH2_FCT_CONTRACT_QUALITY]    Script Date: 12/22/2016 11:14:26 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [PPL].[DWH2_FCT_CONTRACT_QUALITY]
AS
BEGIN
/* Stored Procedure Name	:  PPL.DWH2_FCT_CONTRACT_MONTHEND
 * Source Tables			:  GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY
 * Purpose					:  To replicate data from GL_TNB_DWH.FACT.DWH_TNB_FCT_CONTRACT_MONTHLY to GL_TNB_MRT.FACT.MRT_TNB_FCT_CONTRACT_MONTHEND
 * Parameters				:  -     
 * Permissions				:  -
 * Testing Method			: 1. 
							  2. 
							  3.       
 * Revision History
 * ---------  -------------  -------------------  --------------------------------------------------------------
 * ePWR No    Date			 Author               Description of change
 * ---------  -------------  -------------------  --------------------------------------------------------------
 *            2016-12-06     Nattida.H			  Creation of this initialization script.
 */

 --STEP 1 DELETE PREVIOUS DATA FROM DATA MART (LAST 60 DAYS)
 TRUNCATE TABLE GL_TNB_MRT.FACT.MRT_TNB_FCT_CONTRACT_QUALITY

 --STEP 2 INSERT DATA FROM DATA WAREHOUSE TO DATA MART
 INSERT INTO GL_TNB_MRT.FACT.MRT_TNB_FCT_CONTRACT_QUALITY
 SELECT 
	COALESCE(A.SK_DATE_KEY, C.SK_DATE_KEY) AS SK_DATE_KEY,
	COALESCE(A.SK_PRODUCT_KEY, C.SK_PRODUCT_KEY) AS SK_PRODUCT_KEY,
	COALESCE(A.SK_BRANCH_KEY, C.SK_BRANCH_KEY) AS SK_BRANCH_KEY,
	COALESCE(A.SK_DEALER_KEY, C.SK_DEALER_KEY) AS SK_DEALER_KEY,
	COALESCE(A.SK_BOT_CLASS_KEY, C.SK_BOT_CLASS_KEY) AS SK_BOT_CLASS_KEY,
	ISNULL(TOTAL_FIRST_DUE_CONTRACT, 0) AS TOTAL_FIRST_DUE_CONTRACT, 
	ISNULL(TOTAL_OVERDUE_CONTRACT, 0) AS TOTAL_OVERDUE_CONTRACT,
	ISNULL(TOTAL_OS_PRINCIPAL, 0) AS TOTAL_OS_PRINCIPAL,
	'' AS COMMENT,
	GETDATE() AS LAST_UPDATE_DATE_TIME 
 FROM 
 --TOTAL_OS_PRINCIPAL
	(SELECT 
		DIM_DATE.DATE_KEY AS SK_DATE_KEY,
		SK_PRODUCT_KEY,
		SK_BRANCH_KEY,
		SK_DEALER_KEY,
		SK_BOT_CLASS_KEY,
		CASE 
			WHEN DIM_PROD.PRODUCT_CODE IN  ('09', '11', '12', '20') THEN SUM(OS_BAL) - 
				(SUM(OS_UID1_UNEARN) + SUM(OS_UID1_SURPLUS) + SUM(OS_UID1_OTHER)) + 
				(SUM(REALIZE_UNPAID_UNEARN) + SUM(REALIZE_UNPAID_SURPLUS) + SUM(REALIZE_UNPAID_OTHER)) + 
				(SUM(EOM_UNEARN) + SUM(EOM_SURPLUS) + SUM(EOM_OTHER)) -
				(SUM(REVERSE_UNEARN) + SUM(REVERSE_SURPLUS) + SUM(REVERSE_OTHER)) 
			WHEN DIM_PROD.PRODUCT_CODE IN ('02', '03','10', '08', '14', '01', '07') THEN SUM(OS_BAL) - 
				SUM(OS_UID1_AMOUNT) - SUM(UNEARN_OTHER) + SUM(REALIZED_UNPAID) + SUM(ACCRUED_EOM) -	SUM(REVERSE_UID_AMT)
			ELSE NULL
		END AS TOTAL_OS_PRINCIPAL
	FROM [GL_TNB_DWH].[FACT].[DWH_TNB_FCT_CONTRACT_MONTHLY] CON 
	INNER JOIN [GL_TNB_DWH].[FACT].[DWH_TNB_FCT_APP_CONTRACT] APP ON CON.DOC_NO = APP.DOC_NO AND CON.CHECK_DIGIT = APP.CHECK_DIGIT 
	INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_DATE] DIM_DATE ON CON.DATA_DATE = DIM_DATE.DATE_TIME
	INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_BOT_CLASS] DIM_BOT ON CON.BOT_CLASS_CODE = DIM_BOT.BOT_CLASS_CODE
	INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_PRODUCT] DIM_PROD ON APP.PRODUCT_CODE = DIM_PROD.PRODUCT_CODE
	INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_BRANCH] DIM_BRANCH ON APP.BRANCH_CODE = DIM_BRANCH.BRANCH_CODE
	INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_DEALER] DIM_DEALER ON APP.DEALER_CODE = DIM_DEALER.DEALER_CODE
	WHERE CON.REC_STATUS <> 'C' 
	GROUP BY 
		DIM_DATE.DATE_KEY,
		SK_PRODUCT_KEY,
		SK_BRANCH_KEY,
		SK_DEALER_KEY,
		SK_BOT_CLASS_KEY,
		DIM_PROD.PRODUCT_CODE
	) A
 FULL JOIN
 -- TOTAL_FIRST_DUE_CONTRACT & TOTAL_OVERDUE_CONTRACT
	(
	SELECT 
		DIM_DATE.DATE_KEY AS SK_DATE_KEY,
		SK_PRODUCT_KEY,
		SK_BRANCH_KEY,
		SK_DEALER_KEY,
		ISNULL(SK_BOT_CLASS_KEY, -1) AS SK_BOT_CLASS_KEY,
		COUNT(*) AS TOTAL_FIRST_DUE_CONTRACT,
		SUM(CASE WHEN DUE_PERIOD = 1 AND INSTALL_PASS_DUE > 0 THEN 1 ELSE 0 END) AS TOTAL_OVERDUE_CONTRACT
	FROM [GL_TNB_DWH].[FACT].[DWH_TNB_FCT_CONTRACT_MONTHLY] CON 
	INNER JOIN [GL_TNB_DWH].[FACT].[DWH_TNB_FCT_APP_CONTRACT] APP ON CON.DOC_NO = APP.DOC_NO AND CON.CHECK_DIGIT = APP.CHECK_DIGIT 
	INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_DATE] DIM_DATE ON APP.FIRST_DUE_DATE = DIM_DATE.DATE_TIME
	INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_PRODUCT] DIM_PROD ON APP.PRODUCT_CODE = DIM_PROD.PRODUCT_CODE
	INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_BRANCH] DIM_BRANCH ON APP.BRANCH_CODE = DIM_BRANCH.BRANCH_CODE
	INNER JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_DEALER] DIM_DEALER ON APP.DEALER_CODE = DIM_DEALER.DEALER_CODE
	LEFT JOIN [GL_TNB_DWH].[DIM].[DWH_TNB_DIM_BOT_CLASS] DIM_BOT ON CON.BOT_CLASS_CODE = DIM_BOT.BOT_CLASS_CODE
	WHERE CON.REC_STATUS <> 'C' 
		AND MONTH(DATA_DATE) = MONTH(FIRST_DUE_DATE)
		AND YEAR(DATA_DATE) = YEAR(FIRST_DUE_DATE)
	GROUP BY DIM_DATE.DATE_KEY,
		SK_PRODUCT_KEY,
		SK_BRANCH_KEY,
		SK_DEALER_KEY,
		SK_BOT_CLASS_KEY
	) C
 ON A.SK_DATE_KEY = C.SK_DATE_KEY
 AND A.SK_BRANCH_KEY = C.SK_BRANCH_KEY
 AND A.SK_DEALER_KEY = C.SK_DEALER_KEY
 AND A.SK_BOT_CLASS_KEY = C.SK_BOT_CLASS_KEY
 AND A.SK_PRODUCT_KEY = C.SK_PRODUCT_KEY
 
END

GO